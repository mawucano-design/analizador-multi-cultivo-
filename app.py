
import streamlit as st
import geopandas as gpd
import pandas as pd
import numpy as np
import tempfile
import os
import zipfile
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
from matplotlib.colors import LinearSegmentedColormap
import io
from shapely.geometry import Polygon
import math
import warnings
warnings.filterwarnings('ignore')

# Importar m√≥dulos personalizados
from src.data_processor import (
    PARAMETROS_CULTIVOS, ICONOS_CULTIVOS, PALETAS_GEE,
    calcular_superficie, dividir_parcela_en_zonas,
    calcular_indices_satelitales_gee_mejorado, calcular_recomendaciones_npk_gee,
    get_fuente_nitrogeno, get_fertilizante_balanceado
)
from src.map_utils import crear_mapa_interactivo_gee, MAPAS_BASE
from streamlit_folium import folium_static

st.set_page_config(page_title="üå± Analizador Multi-Cultivo", layout="wide")
st.title("üå± ANALIZADOR MULTI-CULTIVO - METODOLOG√çA GEE + SENTINEL-2")
st.markdown("---")

# Configurar para restaurar .shx autom√°ticamente
os.environ['SHAPE_RESTORE_SHX'] = 'YES'

# Sidebar
with st.sidebar:
    st.header("‚öôÔ∏è Configuraci√≥n")
    
    cultivo = st.selectbox("Cultivo:", 
                          ["TRIGO", "MA√çZ", "SOJA", "SORGO", "GIRASOL"])
    
    analisis_tipo = st.selectbox("Tipo de An√°lisis:", 
                               ["FERTILIDAD ACTUAL", "RECOMENDACIONES NPK"])
    
    nutriente = st.selectbox("Nutriente:", ["NITR√ìGENO", "F√ìSFORO", "POTASIO"])
    
    st.subheader("üõ∞Ô∏è Datos Sentinel-2")
    usar_sentinel = st.checkbox("Usar datos Sentinel-2 Harmonizados", value=True)
    fecha_imagen = st.date_input(
        "Fecha de imagen:",
        value=datetime.now() - timedelta(days=30),
        max_value=datetime.now(),
        help="Selecciona la fecha para an√°lisis satelital"
    )
    
    st.subheader("üó∫Ô∏è Mapa Base")
    mapa_base = st.selectbox(
        "Seleccionar mapa base:",
        list(MAPAS_BASE.keys()),
        index=0
    )
    
    st.subheader("üéØ Divisi√≥n de Parcela")
    n_divisiones = st.slider("N√∫mero de zonas de manejo:", min_value=16, max_value=48, value=32)
    
    st.subheader("üì§ Subir Parcela")
    uploaded_zip = st.file_uploader("Subir ZIP con shapefile de tu parcela", type=['zip'])

# FUNCI√ìN PARA CREAR MAPA GEE (Matplotlib - Original)
def crear_mapa_gee(gdf, nutriente, analisis_tipo, cultivo):
    """Crea mapa con la metodolog√≠a y paletas de Google Earth Engine"""
    try:
        fig, ax = plt.subplots(1, 1, figsize=(14, 10))
        
        # Seleccionar paleta seg√∫n el an√°lisis
        if analisis_tipo == "FERTILIDAD ACTUAL":
            cmap = LinearSegmentedColormap.from_list('fertilidad_gee', PALETAS_GEE['FERTILIDAD'])
            vmin, vmax = 0, 1
            columna = 'npk_actual'
            titulo_sufijo = '√çndice NPK Actual (0-1)'
        else:
            if nutriente == "NITR√ìGENO":
                cmap = LinearSegmentedColormap.from_list('nitrogeno_gee', PALETAS_GEE['NITROGENO'])
                vmin, vmax = (PARAMETROS_CULTIVOS[cultivo]['NITROGENO']['min'] * 0.8, 
                            PARAMETROS_CULTIVOS[cultivo]['NITROGENO']['max'] * 1.2)
            elif nutriente == "F√ìSFORO":
                cmap = LinearSegmentedColormap.from_list('fosforo_gee', PALETAS_GEE['FOSFORO'])
                vmin, vmax = (PARAMETROS_CULTIVOS[cultivo]['FOSFORO']['min'] * 0.8, 
                            PARAMETROS_CULTIVOS[cultivo]['FOSFORO']['max'] * 1.2)
            else:
                cmap = LinearSegmentedColormap.from_list('potasio_gee', PALETAS_GEE['POTASIO'])
                vmin, vmax = (PARAMETROS_CULTIVOS[cultivo]['POTASIO']['min'] * 0.8, 
                            PARAMETROS_CULTIVOS[cultivo]['POTASIO']['max'] * 1.2)
            
            columna = 'valor_recomendado'
            titulo_sufijo = f'Recomendaci√≥n {nutriente} (kg/ha)'
        
        # Plotear cada pol√≠gono
        for idx, row in gdf.iterrows():
            valor = row[columna]
            valor_norm = (valor - vmin) / (vmax - vmin)
            valor_norm = max(0, min(1, valor_norm))
            color = cmap(valor_norm)
            
            gdf.iloc[[idx]].plot(ax=ax, color=color, edgecolor='black', linewidth=1.5)
            
            # Etiqueta con valor
            centroid = row.geometry.centroid
            ax.annotate(f"Z{row['id_zona']}\n{valor:.1f}", (centroid.x, centroid.y), 
                       xytext=(5, 5), textcoords="offset points", 
                       fontsize=8, color='black', weight='bold',
                       bbox=dict(boxstyle="round,pad=0.3", facecolor='white', alpha=0.9))
        
        # Configuraci√≥n del mapa
        ax.set_title(f'{ICONOS_CULTIVOS[cultivo]} AN√ÅLISIS GEE - {cultivo}\n'
                    f'{analisis_tipo} - {titulo_sufijo}\n'
                    f'Metodolog√≠a Google Earth Engine', 
                    fontsize=16, fontweight='bold', pad=20)
        
        ax.set_xlabel('Longitud')
        ax.set_ylabel('Latitud')
        ax.grid(True, alpha=0.3)
        
        # Barra de colores
        sm = plt.cm.ScalarMappable(cmap=cmap, norm=plt.Normalize(vmin=vmin, vmax=vmax))
        sm.set_array([])
        cbar = plt.colorbar(sm, ax=ax, shrink=0.8)
        cbar.set_label(titulo_sufijo, fontsize=12, fontweight='bold')
        
        plt.tight_layout()
        
        # Convertir a imagen
        buf = io.BytesIO()
        plt.savefig(buf, format='png', dpi=150, bbox_inches='tight')
        buf.seek(0)
        plt.close()
        
        return buf
        
    except Exception as e:
        st.error(f"‚ùå Error creando mapa GEE: {str(e)}")
        return None

# FUNCI√ìN PRINCIPAL DE AN√ÅLISIS GEE MEJORADA
def analisis_gee_completo_mejorado(gdf, nutriente, analisis_tipo, n_divisiones, cultivo, usar_sentinel, fecha_imagen, mapa_base):
    try:
        st.header(f"{ICONOS_CULTIVOS[cultivo]} AN√ÅLISIS {cultivo} - METODOLOG√çA GEE + SENTINEL-2")
        
        # Informaci√≥n de fuentes de datos
        if usar_sentinel:
            st.success(f"üõ∞Ô∏è Usando datos Sentinel-2 Harmonizados (L2A - 10m) - Fecha: {fecha_imagen}")
        else:
            st.info("üìä Usando datos simulados")
        
        # PASO 1: DIVIDIR PARCELA
        st.subheader("üìê DIVIDIENDO PARCELA EN ZONAS DE MANEJO")
        with st.spinner("Dividiendo parcela..."):
            gdf_dividido = dividir_parcela_en_zonas(gdf, n_divisiones)
        
        st.success(f"‚úÖ Parcela dividida en {len(gdf_dividido)} zonas")
        
        # Calcular √°reas
        areas_ha = calcular_superficie(gdf_dividido)
        area_total = areas_ha.sum()
        
        # PASO 2: CALCULAR √çNDICES GEE MEJORADOS CON SENTINEL-2
        st.subheader("üõ∞Ô∏è CALCULANDO √çNDICES SATELITALES GEE + SENTINEL-2")
        with st.spinner(f"Ejecutando algoritmos GEE con Sentinel-2 para {cultivo}..."):
            indices_gee = calcular_indices_satelitales_gee_mejorado(
                gdf_dividido, cultivo, usar_sentinel, fecha_imagen
            )
        
        # Crear dataframe con resultados
        gdf_analizado = gdf_dividido.copy()
        gdf_analizado['area_ha'] = areas_ha
        
        # A√±adir √≠ndices GEE
        for idx, indice in enumerate(indices_gee):
            for key, value in indice.items():
                gdf_analizado.loc[gdf_analizado.index[idx], key] = value
        
        # PASO 3: CALCULAR RECOMENDACIONES SI ES NECESARIO
        if analisis_tipo == "RECOMENDACIONES NPK":
            with st.spinner("Calculando recomendaciones NPK..."):
                recomendaciones = calcular_recomendaciones_npk_gee(indices_gee, nutriente, cultivo)
                gdf_analizado['valor_recomendado'] = recomendaciones
                columna_valor = 'valor_recomendado'
        else:
            columna_valor = 'npk_actual'
        
        # PASO 4: CATEGORIZAR PARA RECOMENDACIONES ESPEC√çFICAS POR CULTIVO
        def categorizar_gee(valor, nutriente, analisis_tipo, cultivo):
            params = PARAMETROS_CULTIVOS[cultivo]
            
            if analisis_tipo == "FERTILIDAD ACTUAL":
                if valor < 0.3: return "MUY BAJA"
                elif valor < 0.5: return "BAJA"
                elif valor < 0.6: return "MEDIA"
                elif valor < 0.7: return "BUENA"
                else: return "√ìPTIMA"
            else:
                if nutriente == "NITR√ìGENO":
                    rango = params['NITROGENO']['max'] - params['NITROGENO']['min']
                    if valor < params['NITROGENO']['min'] + 0.2 * rango: return "MUY BAJO"
                    elif valor < params['NITROGENO']['min'] + 0.4 * rango: return "BAJO"
                    elif valor < params['NITROGENO']['min'] + 0.6 * rango: return "MEDIO"
                    elif valor < params['NITROGENO']['min'] + 0.8 * rango: return "ALTO"
                    else: return "MUY ALTO"
                elif nutriente == "F√ìSFORO":
                    rango = params['FOSFORO']['max'] - params['FOSFORO']['min']
                    if valor < params['FOSFORO']['min'] + 0.2 * rango: return "MUY BAJO"
                    elif valor < params['FOSFORO']['min'] + 0.4 * rango: return "BAJO"
                    elif valor < params['FOSFORO']['min'] + 0.6 * rango: return "MEDIO"
                    elif valor < params['FOSFORO']['min'] + 0.8 * rango: return "ALTO"
                    else: return "MUY ALTO"
                else:
                    rango = params['POTASIO']['max'] - params['POTASIO']['min']
                    if valor < params['POTASIO']['min'] + 0.2 * rango: return "MUY BAJO"
                    elif valor < params['POTASIO']['min'] + 0.4 * rango: return "BAJO"
                    elif valor < params['POTASIO']['min'] + 0.6 * rango: return "MEDIO"
                    elif valor < params['POTASIO']['min'] + 0.8 * rango: return "ALTO"
                    else: return "MUY ALTO"
        
        gdf_analizado['categoria'] = [
            categorizar_gee(row[columna_valor], nutriente, analisis_tipo, cultivo) 
            for idx, row in gdf_analizado.iterrows()
        ]
        
        # PASO 5: MOSTRAR RESULTADOS
        st.subheader("üìä RESULTADOS DEL AN√ÅLISIS GEE")
        
        # Estad√≠sticas principales
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("Zonas Analizadas", len(gdf_analizado))
        with col2:
            st.metric("√Årea Total", f"{area_total:.1f} ha")
        with col3:
            if analisis_tipo == "FERTILIDAD ACTUAL":
                valor_prom = gdf_analizado['npk_actual'].mean()
                st.metric("√çndice NPK Promedio", f"{valor_prom:.3f}")
            else:
                valor_prom = gdf_analizado['valor_recomendado'].mean()
                st.metric(f"{nutriente} Promedio", f"{valor_prom:.1f} kg/ha")
        with col4:
            coef_var = (gdf_analizado[columna_valor].std() / gdf_analizado[columna_valor].mean() * 100)
            st.metric("Coef. Variaci√≥n", f"{coef_var:.1f}%")
        
        # VISUALIZACI√ìN CON PESTA√ëAS
        st.subheader("üó∫Ô∏è VISUALIZACI√ìN DE RESULTADOS")
        
        # Crear pesta√±as para diferentes visualizaciones
        tab1, tab2, tab3 = st.tabs([
            "üó∫Ô∏è Mapa Interactivo ESRI", 
            "üìä Mapa Tradicional", 
            "üìã Tabla de Resultados"
        ])
        
        with tab1:
            st.subheader("üó∫Ô∏è MAPA INTERACTIVO CON ESRI")
            with st.spinner("Generando mapa interactivo..."):
                mapa_interactivo = crear_mapa_interactivo_gee(
                    gdf_analizado, nutriente, analisis_tipo, cultivo, mapa_base
                )
                folium_static(mapa_interactivo, width=900, height=600)
            
            st.info(f"**Fuente de datos:** {indices_gee[0]['fuente_datos']} | "
                   f"**Resoluci√≥n:** {indices_gee[0]['resolucion']} | "
                   f"**Procesamiento:** {indices_gee[0]['procesamiento']}")
        
        with tab2:
            st.subheader("üìä MAPA TRADICIONAL GEE")
            mapa_buffer = crear_mapa_gee(gdf_analizado, nutriente, analisis_tipo, cultivo)
            if mapa_buffer:
                st.image(mapa_buffer, use_container_width=True)
                
                st.download_button(
                    "üì• Descargar Mapa GEE",
                    mapa_buffer,
                    f"mapa_gee_{cultivo}_{analisis_tipo.replace(' ', '_')}_{datetime.now().strftime('%Y%m%d_%H%M')}.png",
                    "image/png"
                )
        
        with tab3:
            st.subheader("üìã TABLA DE √çNDICES GEE POR ZONA")
            
            columnas_indices = ['id_zona', 'npk_actual', 'materia_organica', 'ndvi', 'ndre', 'humedad_suelo', 'categoria']
            if analisis_tipo == "RECOMENDACIONES NPK":
                columnas_indices.insert(2, 'valor_recomendado')
            
            tabla_indices = gdf_analizado[columnas_indices].copy()
            tabla_indices.columns = ['Zona', 'NPK Actual'] + (['Recomendaci√≥n'] if analisis_tipo == "RECOMENDACIONES NPK" else []) + [
                'Materia Org (%)', 'NDVI', 'NDRE', 'Humedad', 'Categor√≠a'
            ]
            
            st.dataframe(tabla_indices, use_container_width=True)
        
        # RECOMENDACIONES ESPEC√çFICAS POR CULTIVO
        st.subheader("üí° RECOMENDACIONES ESPEC√çFICAS GEE")
        
        categorias = gdf_analizado['categoria'].unique()
        for cat in sorted(categorias):
            subset = gdf_analizado[gdf_analizado['categoria'] == cat]
            area_cat = subset['area_ha'].sum()
            
            with st.expander(f"üéØ **{cat}** - {area_cat:.1f} ha ({(area_cat/area_total*100):.1f}% del √°rea)"):
                
                if analisis_tipo == "FERTILIDAD ACTUAL":
                    if cat in ["MUY BAJA", "BAJA"]:
                        st.markdown("**üö® ESTRATEGIA: FERTILIZACI√ìN CORRECTIVA**")
                        st.markdown("- Aplicar dosis completas de NPK")
                        st.markdown("- Incorporar materia org√°nica")
                        st.markdown("- Monitorear cada 3 meses")
                    elif cat == "MEDIA":
                        st.markdown("**‚úÖ ESTRATEGIA: MANTENIMIENTO BALANCEADO**")
                        st.markdown("- Seguir programa est√°ndar de fertilizaci√≥n")
                        st.markdown("- Monitorear cada 6 meses")
                    else:
                        st.markdown("**üåü ESTRATEGIA: MANTENIMIENTO CONSERVADOR**")
                        st.markdown("- Reducir dosis de fertilizantes")
                        st.markdown("- Enfoque en sostenibilidad")
                
                else:
                    # Recomendaciones NPK espec√≠ficas por cultivo
                    if cat in ["MUY BAJO", "BAJO"]:
                        st.markdown("**üö® APLICACI√ìN ALTA** - Dosis correctiva urgente")
                        if nutriente == "NITR√ìGENO":
                            st.markdown(f"- **Fuentes:** Urea (46% N) o {get_fuente_nitrogeno(cultivo)}")
                            st.markdown("- **Aplicaci√≥n:** 2-3 dosis fraccionadas")
                        elif nutriente == "F√ìSFORO":
                            st.markdown("- **Fuentes:** Superfosfato triple (46% P‚ÇÇO‚ÇÖ) o Fosfato diam√≥nico")
                            st.markdown("- **Aplicaci√≥n:** Incorporar al suelo")
                        else:
                            st.markdown("- **Fuentes:** Cloruro de potasio (60% K‚ÇÇO) o Sulfato de potasio")
                            st.markdown("- **Aplicaci√≥n:** 2-3 aplicaciones")
                    
                    elif cat == "MEDIO":
                        st.markdown("**‚úÖ APLICACI√ìN MEDIA** - Mantenimiento balanceado")
                        st.markdown(f"- **Fuentes:** {get_fertilizante_balanceado(cultivo)}")
                        st.markdown("- **Aplicaci√≥n:** Programa est√°ndar")
                    
                    else:
                        st.markdown("**üåü APLICACI√ìN BAJA** - Reducci√≥n de dosis")
                        st.markdown("- **Fuentes:** Fertilizantes bajos en el nutriente")
                        st.markdown("- **Aplicaci√≥n:** Solo mantenimiento")
                
                # Mostrar estad√≠sticas de la categor√≠a
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("Zonas", len(subset))
                with col2:
                    if analisis_tipo == "FERTILIDAD ACTUAL":
                        st.metric("NPK Prom", f"{subset['npk_actual'].mean():.3f}")
                    else:
                        st.metric("Valor Prom", f"{subset['valor_recomendado'].mean():.1f}")
                with col3:
                    st.metric("√Årea", f"{area_cat:.1f} ha")
        
        # DESCARGA DE RESULTADOS
        st.subheader("üì• DESCARGAR RESULTADOS COMPLETOS")
        
        csv = gdf_analizado.to_csv(index=False)
        st.download_button(
            "üìã Descargar CSV con An√°lisis GEE",
            csv,
            f"analisis_gee_{cultivo}_{analisis_tipo.replace(' ', '_')}_{datetime.now().strftime('%Y%m%d_%H%M')}.csv",
            "text/csv"
        )
        
        # INFORMACI√ìN T√âCNICA GEE
        with st.expander("üîç VER METODOLOG√çA GEE DETALLADA"):
            st.markdown(f"""
            **üåê METODOLOG√çA GOOGLE EARTH ENGINE + SENTINEL-2 - {cultivo}**
            
            **üéØ PAR√ÅMETROS √ìPTIMOS {cultivo}:**
            - **Materia Org√°nica:** {PARAMETROS_CULTIVOS[cultivo]['MATERIA_ORGANICA_OPTIMA']}%
            - **Humedad Suelo:** {PARAMETROS_CULTIVOS[cultivo]['HUMEDAD_OPTIMA']}
            - **NDVI √ìptimo:** {PARAMETROS_CULTIVOS[cultivo]['NDVI_OPTIMO']}
            - **NDRE √ìptimo:** {PARAMETROS_CULTIVOS[cultivo]['NDRE_OPTIMO']}
            
            **üéØ RANGOS NPK RECOMENDADOS:**
            - **Nitr√≥geno:** {PARAMETROS_CULTIVOS[cultivo]['NITROGENO']['min']}-{PARAMETROS_CULTIVOS[cultivo]['NITROGENO']['max']} kg/ha
            - **F√≥sforo:** {PARAMETROS_CULTIVOS[cultivo]['FOSFORO']['min']}-{PARAMETROS_CULTIVOS[cultivo]['FOSFORO']['max']} kg/ha  
            - **Potasio:** {PARAMETROS_CULTIVOS[cultivo]['POTASIO']['min']}-{PARAMETROS_CULTIVOS[cultivo]['POTASIO']['max']} kg/ha
            
            **üõ∞Ô∏è DATOS SENTINEL-2 HARMONIZADOS UTILIZADOS:**
            - **Resoluci√≥n:** 10m
            - **Procesamiento:** L2A (Correcci√≥n Atmosf√©rica)
            - **Bandas Utilizadas:** B2, B4, B5, B8, B11
            - **√çndices Calculados:** NDVI, NDRE, Materia Org√°nica, Humedad
            """)
        
        return True
        
    except Exception as e:
        st.error(f"‚ùå Error en an√°lisis GEE: {str(e)}")
        import traceback
        st.error(f"Detalle: {traceback.format_exc()}")
        return False

# INTERFAZ PRINCIPAL
if uploaded_zip:
    with st.spinner("Cargando parcela..."):
        try:
            with tempfile.TemporaryDirectory() as tmp_dir:
                with zipfile.ZipFile(uploaded_zip, 'r') as zip_ref:
                    zip_ref.extractall(tmp_dir)
                
                shp_files = [f for f in os.listdir(tmp_dir) if f.endswith('.shp')]
                if shp_files:
                    shp_path = os.path.join(tmp_dir, shp_files[0])
                    gdf = gpd.read_file(shp_path)
                    
                    st.success(f"‚úÖ **Parcela cargada:** {len(gdf)} pol√≠gono(s)")
                    
                    # Informaci√≥n de la parcela
                    area_total = calcular_superficie(gdf).sum()
                    
                    col1, col2, col3 = st.columns(3)
                    with col1:
                        st.write("**üìä INFORMACI√ìN DE LA PARCELA:**")
                        st.write(f"- Pol√≠gonos: {len(gdf)}")
                        st.write(f"- √Årea total: {area_total:.1f} ha")
                        st.write(f"- CRS: {gdf.crs}")
                    
                    with col2:
                        st.write("**üéØ CONFIGURACI√ìN GEE:**")
                        st.write(f"- Cultivo: {ICONOS_CULTIVOS[cultivo]} {cultivo}")
                        st.write(f"- An√°lisis: {analisis_tipo}")
                        st.write(f"- Nutriente: {nutriente}")
                        st.write(f"- Zonas: {n_divisiones}")
                    
                    with col3:
                        st.write("**üõ∞Ô∏è DATOS SATELITALES:**")
                        fuente = "Sentinel-2 Harmonized" if usar_sentinel else "Simulado"
                        st.write(f"- Fuente: {fuente}")
                        if usar_sentinel:
                            st.write(f"- Fecha: {fecha_imagen}")
                            st.write(f"- Resoluci√≥n: 10m")
                    
                    # EJECUTAR AN√ÅLISIS GEE MEJORADO
                    if st.button("üöÄ EJECUTAR AN√ÅLISIS GEE + SENTINEL-2", type="primary"):
                        analisis_gee_completo_mejorado(
                            gdf, nutriente, analisis_tipo, n_divisiones, cultivo, 
                            usar_sentinel, fecha_imagen, mapa_base
                        )
                        
        except Exception as e:
            st.error(f"Error cargando shapefile: {str(e)}")

else:
    st.info("üìÅ Sube el ZIP de tu parcela para comenzar el an√°lisis")
    
    # INFORMACI√ìN INICIAL MEJORADA
    with st.expander("‚ÑπÔ∏è INFORMACI√ìN SOBRE LA METODOLOG√çA GEE + SENTINEL-2"):
        st.markdown("""
        **üå± SISTEMA DE AN√ÅLISIS MULTI-CULTIVO (GEE + SENTINEL-2)**
        
        **üõ∞Ô∏è NUEVAS CARACTER√çSTICAS:**
        - **Sentinel-2 Harmonizado:** Datos reales de sat√©lite
        - **Resoluci√≥n 10m:** Alta precisi√≥n espacial
        - **Procesamiento L2A:** Correcci√≥n atmosf√©rica incluida
        - **Mapas Base ESRI:** Visualizaci√≥n profesional
        - **An√°lisis en Tiempo Real:** Datos actualizados
        
        **üìä CULTIVOS SOPORTADOS:**
        - **üåæ TRIGO:** Cereal de clima templado
        - **üåΩ MA√çZ:** Cereal de alta demanda nutricional  
        - **ü´ò SOJA:** Leguminosa fijadora de nitr√≥geno
        - **üåæ SORGO:** Cereal resistente a sequ√≠a
        - **üåª GIRASOL:** Oleaginosa de profundas ra√≠ces
        
        **üöÄ FUNCIONALIDADES:**
        - **üå± Fertilidad Actual:** Estado NPK del suelo usando √≠ndices satelitales
        - **üíä Recomendaciones NPK:** Dosis espec√≠ficas por cultivo basadas en GEE
        - **üõ∞Ô∏è Metodolog√≠a GEE:** Algoritmos cient√≠ficos de Google Earth Engine
        - **üéØ Agricultura Precisi√≥n:** Mapas de prescripci√≥n por zonas
        
        **üî¨ METODOLOG√çA CIENT√çFICA:**
        - An√°lisis basado en im√°genes Sentinel-2 Harmonizadas
        - Par√°metros espec√≠ficos para cada cultivo
        - C√°lculo de √≠ndices de vegetaci√≥n y suelo
        - Recomendaciones validadas cient√≠ficamente
        """)
