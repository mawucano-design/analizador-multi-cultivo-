import streamlit as st
import geopandas as gpd
import pandas as pd
import numpy as np
import tempfile
import os
import zipfile
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
from matplotlib.colors import LinearSegmentedColormap
import io
from shapely.geometry import Polygon
import math

# Nuevas importaciones para im√°genes satelitales reales
import ee
import folium
from streamlit_folium import folium_static
from branca.colormap import LinearColormap

# Inicializar Earth Engine
try:
    ee.Initialize()
except Exception as e:
    st.warning(f"‚ö†Ô∏è Earth Engine no inicializado. Usando datos simulados. Error: {e}")

st.set_page_config(page_title="üå± Analizador Multi-Cultivo", layout="wide")
st.title("üå± ANALIZADOR MULTI-CULTIVO - IM√ÅGENES SATELITALES REALES")
st.markdown("---")

# Configurar para restaurar .shx autom√°ticamente
os.environ['SHAPE_RESTORE_SHX'] = 'YES'

# Sidebar
with st.sidebar:
    st.header("‚öôÔ∏è Configuraci√≥n")
    
    cultivo = st.selectbox("Cultivo:", 
                          ["TRIGO", "MA√çZ", "SOJA", "SORGO", "GIRASOL"])
    
    analisis_tipo = st.selectbox("Tipo de An√°lisis:", 
                               ["FERTILIDAD ACTUAL", "RECOMENDACIONES NPK"])
    
    nutriente = st.selectbox("Nutriente:", ["NITR√ìGENO", "F√ìSFORO", "POTASIO"])
    
    # Nueva secci√≥n para im√°genes satelitales
    st.subheader("üõ∞Ô∏è Fuente Satelital")
    fuente_satelital = st.selectbox(
        "Seleccionar sat√©lite:",
        ["SENTINEL-2", "LANDSAT-8", "LANDSAT-9", "SIMULADO"],
        help="Sentinel-2: Mayor resoluci√≥n (10m). Landsat: Cobertura global hist√≥rica."
    )
    
    st.subheader("üìÖ Configuraci√≥n Temporal")
    fecha_imagen = st.date_input(
        "Fecha de imagen satelital:",
        value=datetime.now() - timedelta(days=30),
        max_value=datetime.now(),
        help="Selecciona la fecha para la imagen satelital"
    )
    
    nubes_max = st.slider("M√°ximo % de nubes permitido:", 0, 100, 20)
    
    st.subheader("üéØ Divisi√≥n de Parcela")
    n_divisiones = st.slider("N√∫mero de zonas de manejo:", min_value=16, max_value=48, value=32)
    
    st.subheader("üì§ Subir Parcela")
    uploaded_zip = st.file_uploader("Subir ZIP con shapefile de tu parcela", type=['zip'])

# =============================================================================
# FUNCIONES PARA OBTENER IM√ÅGENES SATELITALES REALES
# =============================================================================

def obtener_imagen_sentinel2_real(geometry, fecha_inicio, fecha_fin, nubes_max=20):
    """
    Obtiene imagen Sentinel-2 real para el √°rea de inter√©s
    """
    try:
        # Convertir geometr√≠a a formato Earth Engine
        coords = geometry.__geo_interface__['coordinates']
        aoi = ee.Geometry.Polygon(coords)
        
        # Filtrar colecci√≥n Sentinel-2
        collection = (ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED')
                     .filterBounds(aoi)
                     .filterDate(ee.Date(fecha_inicio.strftime('%Y-%m-%d')), 
                                ee.Date(fecha_fin.strftime('%Y-%m-%d')))
                     .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', nubes_max))
                     .sort('CLOUDY_PIXEL_PERCENTAGE'))
        
        # Obtener imagen menos nublada
        image = collection.first()
        
        if image is None:
            st.warning("No se encontraron im√°genes Sentinel-2 para los criterios especificados")
            return None
        
        # Calcular √≠ndices espectrales para agricultura
        ndvi = image.normalizedDifference(['B8', 'B4']).rename('NDVI')
        ndre = image.normalizedDifference(['B8A', 'B5']).rename('NDRE')
        evi = image.expression(
            '2.5 * ((NIR - RED) / (NIR + 6 * RED - 7.5 * BLUE + 1))', {
                'NIR': image.select('B8'),
                'RED': image.select('B4'),
                'BLUE': image.select('B2')
            }).rename('EVI')
        
        # √çndices espec√≠ficos para fertilidad
        gndvi = image.normalizedDifference(['B8', 'B3']).rename('GNDVI')  # Green NDVI
        ndwi = image.normalizedDifference(['B3', 'B8']).rename('NDWI')    # Water Index
        
        # Agregar bandas de √≠ndices a la imagen
        image_with_indices = image.addBands([ndvi, ndre, evi, gndvi, ndwi])
        
        return image_with_indices
        
    except Exception as e:
        st.warning(f"No se pudo obtener imagen Sentinel-2: {str(e)}")
        return None

def obtener_imagen_landsat_real(geometry, fecha_inicio, fecha_fin, landsat_version='LANDSAT-8', nubes_max=20):
    """
    Obtiene imagen Landsat real para el √°rea de inter√©s
    """
    try:
        aoi = ee.Geometry.Polygon(geometry.__geo_interface__['coordinates'])
        
        # Seleccionar colecci√≥n seg√∫n versi√≥n
        if landsat_version == 'LANDSAT-8':
            collection_id = 'LANDSAT/LC08/C02/T1_L2'
        else:  # LANDSAT-9
            collection_id = 'LANDSAT/LC09/C02/T1_L2'
        
        collection = (ee.ImageCollection(collection_id)
                     .filterBounds(aoi)
                     .filterDate(ee.Date(fecha_inicio.strftime('%Y-%m-%d')), 
                                ee.Date(fecha_fin.strftime('%Y-%m-%d')))
                     .filter(ee.Filter.lt('CLOUD_COVER', nubes_max))
                     .sort('CLOUD_COVER'))
        
        image = collection.first()
        
        if image is None:
            st.warning(f"No se encontraron im√°genes {landsat_version} para los criterios especificados")
            return None
        
        # Aplicar factores de escala para Landsat
        optical_bands = image.select(['SR_B2', 'SR_B3', 'SR_B4', 'SR_B5', 'SR_B6', 'SR_B7']).multiply(0.0000275).add(-0.2)
        
        # Calcular √≠ndices para agricultura
        ndvi = image.normalizedDifference(['SR_B5', 'SR_B4']).rename('NDVI')
        evi = image.expression(
            '2.5 * ((NIR - RED) / (NIR + 6 * RED - 7.5 * BLUE + 1))', {
                'NIR': image.select('SR_B5'),
                'RED': image.select('SR_B4'),
                'BLUE': image.select('SR_B2')
            }).rename('EVI')
        
        # GNDVI para Landsat
        gndvi = image.normalizedDifference(['SR_B5', 'SR_B3']).rename('GNDVI')
        
        # NDWI para Landsat
        ndwi = image.normalizedDifference(['SR_B3', 'SR_B5']).rename('NDWI')
        
        # Aproximaci√≥n de NDRE para Landsat (usando bandas disponibles)
        ndre_approx = image.normalizedDifference(['SR_B5', 'SR_B6']).rename('NDRE')
        
        image_with_indices = optical_bands.addBands([ndvi, evi, gndvi, ndwi, ndre_approx])
        
        return image_with_indices
        
    except Exception as e:
        st.warning(f"No se pudo obtener imagen {landsat_version}: {str(e)}")
        return None

def extraer_valores_indices_por_zona(imagen_gee, gdf_zonas):
    """
    Extrae valores de √≠ndices satelitales reales para cada zona
    """
    try:
        resultados = []
        
        for idx, zona in gdf_zonas.iterrows():
            # Convertir geometr√≠a a formato Earth Engine
            geometry_ee = ee.Geometry.Polygon(
                [[[coord[0], coord[1]] for coord in zona.geometry.exterior.coords]]
            )
            
            # Reducir regi√≥n para obtener estad√≠sticas
            stats = imagen_gee.reduceRegion(
                reducer=ee.Reducer.mean(),
                geometry=geometry_ee,
                scale=30,  # 30m para compatibilidad
                maxPixels=1e9
            )
            
            # Obtener valores de √≠ndices agr√≠colas
            ndvi_val = stats.get('NDVI').getInfo()
            ndre_val = stats.get('NDRE').getInfo()
            evi_val = stats.get('EVI').getInfo()
            gndvi_val = stats.get('GNDVI').getInfo()
            ndwi_val = stats.get('NDWI').getInfo()
            
            # Usar valores reales si est√°n disponibles, sino valores simulados realistas
            resultados.append({
                'ndvi_real': ndvi_val if ndvi_val is not None else np.random.uniform(0.2, 0.8),
                'ndre_real': ndre_val if ndre_val is not None else np.random.uniform(0.1, 0.6),
                'evi_real': evi_val if evi_val is not None else np.random.uniform(0.1, 0.7),
                'gndvi_real': gndvi_val if gndvi_val is not None else np.random.uniform(0.15, 0.75),
                'ndwi_real': ndwi_val if ndwi_val is not None else np.random.uniform(-0.2, 0.4),
                'id_zona': zona['id_zona'],
                'datos_reales': ndvi_val is not None
            })
            
        return resultados
        
    except Exception as e:
        st.warning(f"Error extrayendo valores satelitales: {str(e)}")
        # Valores por defecto si hay error
        return [
            {
                'ndvi_real': np.random.uniform(0.2, 0.8),
                'ndre_real': np.random.uniform(0.1, 0.6),
                'evi_real': np.random.uniform(0.1, 0.7),
                'gndvi_real': np.random.uniform(0.15, 0.75),
                'ndwi_real': np.random.uniform(-0.2, 0.4),
                'id_zona': i+1,
                'datos_reales': False
            } for i in range(len(gdf_zonas))
        ]

def crear_mapa_interactivo_satelital(imagen_gee, gdf_parcela, cultivo, indice='NDVI'):
    """
    Crea mapa interactivo con im√°genes satelitales reales
    """
    try:
        # Obtener centroide para centrar el mapa
        centroid = gdf_parcela.geometry.centroid.iloc[0]
        m = folium.Map(location=[centroid.y, centroid.x], zoom_start=13)
        
        # Par√°metros de visualizaci√≥n seg√∫n el √≠ndice
        if indice == 'NDVI':
            vis_params = {
                'min': 0.0,
                'max': 1.0,
                'palette': ['red', 'yellow', 'green', 'darkgreen']
            }
            bandas = ['NDVI']
        elif indice == 'EVI':
            vis_params = {
                'min': 0.0,
                'max': 1.0,
                'palette': ['brown', 'yellow', 'green', 'darkgreen']
            }
            bandas = ['EVI']
        elif indice == 'NDRE':
            vis_params = {
                'min': 0.0,
                'max': 0.6,
                'palette': ['red', 'orange', 'yellow', 'green']
            }
            bandas = ['NDRE']
        else:  # True Color
            vis_params = {
                'bands': ['B4', 'B3', 'B2'],
                'min': 0,
                'max': 3000
            }
            bandas = ['B4', 'B3', 'B2']
        
        # A√±adir capa satelital
        map_id_dict = imagen_gee.select(bandas).getMapId(vis_params)
        
        folium.TileLayer(
            tiles=map_id_dict['tile_fetcher'].url_format,
            attr='Google Earth Engine',
            name=f'Imagen {indice}',
            overlay=True,
            control=True
        ).add_to(m)
        
        # A√±adir pol√≠gonos de zonas
        for idx, row in gdf_parcela.iterrows():
            sim_geo = gpd.GeoSeries(row['geometry']).simplify(tolerance=0.001)
            geo_j = sim_geo.__geo_interface__['features'][0]['geometry']
            
            # Color seg√∫n NDVI si est√° disponible
            color = 'red'
            if 'ndvi' in row:
                if row['ndvi'] > 0.7:
                    color = 'green'
                elif row['ndvi'] > 0.5:
                    color = 'yellow'
                elif row['ndvi'] > 0.3:
                    color = 'orange'
            
            folium.GeoJson(
                data=geo_j,
                style_function=lambda x, color=color: {
                    'fillColor': 'none',
                    'color': color,
                    'weight': 2,
                    'fillOpacity': 0.1
                },
                tooltip=f"Zona {row['id_zona']} - NDVI: {row.get('ndvi', 'N/A'):.3f}"
            ).add_to(m)
        
        # A√±adir control de capas
        folium.LayerControl().add_to(m)
        
        # A√±adir t√≠tulo
        title_html = f'''
                     <h3 align="center" style="font-size:16px"><b>Mapa Satelital - {cultivo} - {indice}</b></h3>
                     '''
        m.get_root().html.add_child(folium.Element(title_html))
        
        return m
        
    except Exception as e:
        st.warning(f"Error creando mapa interactivo: {str(e)}")
        return None

# =============================================================================
# PAR√ÅMETROS GEE POR CULTIVO (mantener igual)
# =============================================================================

PARAMETROS_CULTIVOS = {
    'TRIGO': {
        'NITROGENO': {'min': 120, 'max': 180},
        'FOSFORO': {'min': 40, 'max': 60},
        'POTASIO': {'min': 80, 'max': 120},
        'MATERIA_ORGANICA_OPTIMA': 3.5,
        'HUMEDAD_OPTIMA': 0.25,
        'NDVI_OPTIMO': 0.7,
        'NDRE_OPTIMO': 0.4,
        'EVI_OPTIMO': 0.5,
        'GNDVI_OPTIMO': 0.6
    },
    'MA√çZ': {
        'NITROGENO': {'min': 150, 'max': 220},
        'FOSFORO': {'min': 50, 'max': 70},
        'POTASIO': {'min': 100, 'max': 140},
        'MATERIA_ORGANICA_OPTIMA': 4.0,
        'HUMEDAD_OPTIMA': 0.3,
        'NDVI_OPTIMO': 0.75,
        'NDRE_OPTIMO': 0.45,
        'EVI_OPTIMO': 0.6,
        'GNDVI_OPTIMO': 0.65
    },
    'SOJA': {
        'NITROGENO': {'min': 80, 'max': 120},
        'FOSFORO': {'min': 35, 'max': 50},
        'POTASIO': {'min': 90, 'max': 130},
        'MATERIA_ORGANICA_OPTIMA': 3.8,
        'HUMEDAD_OPTIMA': 0.28,
        'NDVI_OPTIMO': 0.65,
        'NDRE_OPTIMO': 0.35,
        'EVI_OPTIMO': 0.45,
        'GNDVI_OPTIMO': 0.55
    },
    'SORGO': {
        'NITROGENO': {'min': 100, 'max': 150},
        'FOSFORO': {'min': 30, 'max': 45},
        'POTASIO': {'min': 70, 'max': 100},
        'MATERIA_ORGANICA_OPTIMA': 3.0,
        'HUMEDAD_OPTIMA': 0.22,
        'NDVI_OPTIMO': 0.6,
        'NDRE_OPTIMO': 0.3,
        'EVI_OPTIMO': 0.4,
        'GNDVI_OPTIMO': 0.5
    },
    'GIRASOL': {
        'NITROGENO': {'min': 90, 'max': 130},
        'FOSFORO': {'min': 25, 'max': 40},
        'POTASIO': {'min': 80, 'max': 110},
        'MATERIA_ORGANICA_OPTIMA': 3.2,
        'HUMEDAD_OPTIMA': 0.26,
        'NDVI_OPTIMO': 0.55,
        'NDRE_OPTIMO': 0.25,
        'EVI_OPTIMO': 0.35,
        'GNDVI_OPTIMO': 0.45
    }
}

# ICONOS Y COLORES POR CULTIVO (mantener igual)
ICONOS_CULTIVOS = {
    'TRIGO': 'üåæ',
    'MA√çZ': 'üåΩ', 
    'SOJA': 'ü´ò',
    'SORGO': 'üåæ',
    'GIRASOL': 'üåª'
}

COLORES_CULTIVOS = {
    'TRIGO': '#FFD700',
    'MA√çZ': '#FFA500', 
    'SOJA': '#8B4513',
    'SORGO': '#D2691E',
    'GIRASOL': '#FFD700'
}

# PALETAS GEE MEJORADAS (mantener igual)
PALETAS_GEE = {
    'FERTILIDAD': ['#d73027', '#f46d43', '#fdae61', '#fee08b', '#d9ef8b', '#a6d96a', '#66bd63', '#1a9850', '#006837'],
    'NITROGENO': ['#00ff00', '#80ff00', '#ffff00', '#ff8000', '#ff0000'],
    'FOSFORO': ['#0000ff', '#4040ff', '#8080ff', '#c0c0ff', '#ffffff'],
    'POTASIO': ['#4B0082', '#6A0DAD', '#8A2BE2', '#9370DB', '#D8BFD8']
}

# =============================================================================
# FUNCIONES B√ÅSICAS (mantener igual)
# =============================================================================

def calcular_superficie(gdf):
    try:
        if gdf.crs and gdf.crs.is_geographic:
            area_m2 = gdf.geometry.area * 10000000000
        else:
            area_m2 = gdf.geometry.area
        return area_m2 / 10000
    except:
        return gdf.geometry.area / 10000

def dividir_parcela_en_zonas(gdf, n_zonas):
    if len(gdf) == 0:
        return gdf
    
    parcela_principal = gdf.iloc[0].geometry
    bounds = parcela_principal.bounds
    minx, miny, maxx, maxy = bounds
    
    sub_poligonos = []
    
    n_cols = math.ceil(math.sqrt(n_zonas))
    n_rows = math.ceil(n_zonas / n_cols)
    
    width = (maxx - minx) / n_cols
    height = (maxy - miny) / n_rows
    
    for i in range(n_rows):
        for j in range(n_cols):
            if len(sub_poligonos) >= n_zonas:
                break
                
            cell_minx = minx + (j * width)
            cell_maxx = minx + ((j + 1) * width)
            cell_miny = miny + (i * height)
            cell_maxy = miny + ((i + 1) * height)
            
            cell_poly = Polygon([
                (cell_minx, cell_miny),
                (cell_maxx, cell_miny),
                (cell_maxx, cell_maxy),
                (cell_minx, cell_maxy)
            ])
            
            intersection = parcela_principal.intersection(cell_poly)
            if not intersection.is_empty and intersection.area > 0:
                sub_poligonos.append(intersection)
    
    if sub_poligonos:
        nuevo_gdf = gpd.GeoDataFrame({
            'id_zona': range(1, len(sub_poligonos) + 1),
            'geometry': sub_poligonos
        }, crs=gdf.crs)
        return nuevo_gdf
    else:
        return gdf

# =============================================================================
# FUNCIONES DE AN√ÅLISIS ACTUALIZADAS CON IM√ÅGENES REALES
# =============================================================================

def calcular_indices_satelitales_con_imagenes_reales(gdf, cultivo, fuente_satelital, fecha_imagen, nubes_max=20):
    """
    Implementa la metodolog√≠a completa de Google Earth Engine con im√°genes reales
    """
    n_poligonos = len(gdf)
    resultados = []
    
    # Obtener imagen satelital real si no es SIMULADO
    imagen_satelital = None
    if fuente_satelital != "SIMULADO":
        st.info(f"üõ∞Ô∏è Obteniendo imagen {fuente_satelital}...")
        
        fecha_fin = fecha_imagen + timedelta(days=30)  # Ventana de 30 d√≠as
        
        if fuente_satelital == "SENTINEL-2":
            imagen_satelital = obtener_imagen_sentinel2_real(
                gdf.iloc[0].geometry, fecha_imagen, fecha_fin, nubes_max
            )
        elif fuente_satelital in ["LANDSAT-8", "LANDSAT-9"]:
            imagen_satelital = obtener_imagen_landsat_real(
                gdf.iloc[0].geometry, fecha_imagen, fecha_fin, fuente_satelital, nubes_max
            )
        
        if imagen_satelital:
            st.success(f"‚úÖ Imagen {fuente_satelital} obtenida exitosamente")
            
            # Extraer valores reales por zona
            valores_reales = extraer_valores_indices_por_zona(imagen_satelital, gdf)
        else:
            st.warning("‚ö†Ô∏è No se pudo obtener imagen satelital, usando datos simulados")
            valores_reales = None
    else:
        st.info("üîç Usando datos simulados")
        valores_reales = None
    
    # Obtener centroides para gradiente espacial
    gdf_centroids = gdf.copy()
    gdf_centroids['centroid'] = gdf_centroids.geometry.centroid
    gdf_centroids['x'] = gdf_centroids.centroid.x
    gdf_centroids['y'] = gdf_centroids.centroid.y
    
    x_coords = gdf_centroids['x'].tolist()
    y_coords = gdf_centroids['y'].tolist()
    
    x_min, x_max = min(x_coords), max(x_coords)
    y_min, y_max = min(y_coords), max(y_coords)
    
    # Par√°metros espec√≠ficos del cultivo
    params = PARAMETROS_CULTIVOS[cultivo]
    
    for idx, row in gdf_centroids.iterrows():
        # Normalizar posici√≥n para simular variaci√≥n espacial
        x_norm = (row['x'] - x_min) / (x_max - x_min) if x_max != x_min else 0.5
        y_norm = (row['y'] - y_min) / (y_max - y_min) if y_max != y_min else 0.5
        
        patron_espacial = (x_norm * 0.6 + y_norm * 0.4)
        
        # Usar datos reales si est√°n disponibles
        if valores_reales and idx < len(valores_reales):
            datos_reales = valores_reales[idx]
            ndvi = datos_reales['ndvi_real']
            ndre = datos_reales['ndre_real']
            evi = datos_reales['evi_real']
            gndvi = datos_reales['gndvi_real']
            ndwi = datos_reales['ndwi_real']
            datos_reales_flag = datos_reales['datos_reales']
        else:
            # Datos simulados como fallback
            ndvi_base = params['NDVI_OPTIMO'] * 0.6
            ndvi_variacion = patron_espacial * (params['NDVI_OPTIMO'] * 0.5)
            ndvi = ndvi_base + ndvi_variacion + np.random.normal(0, 0.06)
            ndvi = max(0.1, min(0.9, ndvi))
            
            ndre_base = params['NDRE_OPTIMO'] * 0.7
            ndre_variacion = patron_espacial * (params['NDRE_OPTIMO'] * 0.4)
            ndre = ndre_base + ndre_variacion + np.random.normal(0, 0.04)
            ndre = max(0.05, min(0.7, ndre))
            
            evi_base = params['EVI_OPTIMO'] * 0.7
            evi_variacion = patron_espacial * (params['EVI_OPTIMO'] * 0.3)
            evi = evi_base + evi_variacion + np.random.normal(0, 0.05)
            evi = max(0.05, min(0.8, evi))
            
            gndvi = ndvi * 0.9 + np.random.normal(0, 0.03)
            ndwi = np.random.uniform(-0.1, 0.3)
            datos_reales_flag = False
        
        # Calcular otros par√°metros basados en √≠ndices reales/simulados
        materia_organica = max(0.5, min(8.0, 
            (ndvi * 2.5) + (gndvi * 1.5) + np.random.normal(0, 0.3)))
        
        humedad_suelo = max(0.1, min(0.8, 
            (ndwi * 0.8) + np.random.normal(0, 0.05)))
        
        # NPK actual mejorado con m√°s √≠ndices
        npk_actual = (ndvi * 0.25) + (ndre * 0.25) + (evi * 0.2) + (gndvi * 0.15) + ((materia_organica / 8) * 0.1) + (humedad_suelo * 0.05)
        npk_actual = max(0, min(1, npk_actual))
        
        resultados.append({
            'materia_organica': round(materia_organica, 2),
            'humedad_suelo': round(humedad_suelo, 3),
            'ndvi': round(ndvi, 3),
            'ndre': round(ndre, 3),
            'evi': round(evi, 3),
            'gndvi': round(gndvi, 3),
            'ndwi': round(ndwi, 3),
            'npk_actual': round(npk_actual, 3),
            'datos_reales': datos_reales_flag,
            'x_norm': round(x_norm, 3),
            'y_norm': round(y_norm, 3)
        })
    
    # Mostrar estad√≠sticas de datos reales
    if valores_reales:
        datos_reales_count = sum(1 for r in resultados if r['datos_reales'])
        st.info(f"üìä {datos_reales_count}/{len(resultados)} zonas con datos satelitales reales")
    
    return resultados, imagen_satelital

# FUNCI√ìN GEE PARA RECOMENDACIONES NPK (mantener igual)
def calcular_recomendaciones_npk_gee(indices, nutriente, cultivo):
    """
    Calcula recomendaciones NPK basadas en la metodolog√≠a GEE espec√≠fica por cultivo
    """
    recomendaciones = []
    params = PARAMETROS_CULTIVOS[cultivo]
    
    for idx in indices:
        ndre = idx['ndre']
        materia_organica = idx['materia_organica']
        humedad_suelo = idx['humedad_suelo']
        ndvi = idx['ndvi']
        gndvi = idx['gndvi']
        
        if nutriente == "NITR√ìGENO":
            # F√≥rmula GEE mejorada con m√°s √≠ndices
            factor_n = ((1 - ndre) * 0.4 + (1 - ndvi) * 0.3 + (1 - gndvi) * 0.3)
            n_recomendado = (factor_n * 
                           (params['NITROGENO']['max'] - params['NITROGENO']['min']) + 
                           params['NITROGENO']['min'])
            n_recomendado = max(params['NITROGENO']['min'] * 0.8, 
                              min(params['NITROGENO']['max'] * 1.2, n_recomendado))
            recomendaciones.append(round(n_recomendado, 1))
            
        elif nutriente == "F√ìSFORO":
            # F√≥rmula GEE mejorada
            factor_p = ((1 - (materia_organica / 8)) * 0.5 + (1 - humedad_suelo) * 0.3 + (1 - ndvi) * 0.2)
            p_recomendado = (factor_p * 
                           (params['FOSFORO']['max'] - params['FOSFORO']['min']) + 
                           params['FOSFORO']['min'])
            p_recomendado = max(params['FOSFORO']['min'] * 0.8, 
                              min(params['FOSFORO']['max'] * 1.2, p_recomendado))
            recomendaciones.append(round(p_recomendado, 1))
            
        else:  # POTASIO
            # F√≥rmula GEE mejorada
            factor_k = ((1 - ndre) * 0.3 + (1 - humedad_suelo) * 0.3 + (1 - (materia_organica / 8)) * 0.2 + (1 - gndvi) * 0.2)
            k_recomendado = (factor_k * 
                           (params['POTASIO']['max'] - params['POTASIO']['min']) + 
                           params['POTASIO']['min'])
            k_recomendado = max(params['POTASIO']['min'] * 0.8, 
                              min(params['POTASIO']['max'] * 1.2, k_recomendado))
            recomendaciones.append(round(k_recomendado, 1))
    
    return recomendaciones

# =============================================================================
# FUNCI√ìN PRINCIPAL ACTUALIZADA CON IM√ÅGENES REALES
# =============================================================================

def analisis_gee_completo_con_imagenes_reales(gdf, nutriente, analisis_tipo, n_divisiones, cultivo, 
                                            fuente_satelital, fecha_imagen, nubes_max):
    try:
        st.header(f"{ICONOS_CULTIVOS[cultivo]} AN√ÅLISIS {cultivo} - IM√ÅGENES SATELITALES REALES")
        
        # Mostrar configuraci√≥n
        st.subheader("üõ∞Ô∏è CONFIGURACI√ìN SATELITAL")
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("Sat√©lite", fuente_satelital)
        with col2:
            st.metric("Fecha Imagen", fecha_imagen.strftime('%d/%m/%Y'))
        with col3:
            st.metric("M√°x. Nubes", f"{nubes_max}%")
        with col4:
            st.metric("Cultivo", cultivo)
        
        # PASO 1: DIVIDIR PARCELA
        st.subheader("üìê DIVIDIENDO PARCELA EN ZONAS DE MANEJO")
        with st.spinner("Dividiendo parcela..."):
            gdf_dividido = dividir_parcela_en_zonas(gdf, n_divisiones)
        
        st.success(f"‚úÖ Parcela dividida en {len(gdf_dividido)} zonas")
        
        # Calcular √°reas
        areas_ha = calcular_superficie(gdf_dividido)
        area_total = areas_ha.sum()
        
        # PASO 2: OBTENER Y PROCESAR IM√ÅGENES SATELITALES
        st.subheader("üõ∞Ô∏è OBTENIENDO IM√ÅGENES SATELITALES")
        with st.spinner(f"Descargando y procesando im√°genes {fuente_satelital}..."):
            indices_gee, imagen_satelital = calcular_indices_satelitales_con_imagenes_reales(
                gdf_dividido, cultivo, fuente_satelital, fecha_imagen, nubes_max
            )
        
        # Crear dataframe con resultados
        gdf_analizado = gdf_dividido.copy()
        gdf_analizado['area_ha'] = areas_ha
        
        # A√±adir √≠ndices GEE
        for idx, indice in enumerate(indices_gee):
            for key, value in indice.items():
                gdf_analizado.loc[gdf_analizado.index[idx], key] = value
        
        # PASO 3: MOSTRAR MAPA INTERACTIVO CON IM√ÅGENES REALES
        if imagen_satelital and fuente_satelital != "SIMULADO":
            st.subheader("üó∫Ô∏è MAPA INTERACTIVO CON IM√ÅGENES SATELITALES")
            
            col1, col2 = st.columns(2)
            with col1:
                indice_visualizacion = st.selectbox(
                    "Seleccionar capa para visualizar:",
                    ["NDVI", "EVI", "NDRE", "True Color"],
                    key="indice_visualizacion"
                )
            
            with st.spinner("Generando mapa interactivo..."):
                mapa_interactivo = crear_mapa_interactivo_satelital(
                    imagen_satelital, gdf_analizado, cultivo, indice_visualizacion
                )
                
                if mapa_interactivo:
                    folium_static(mapa_interactivo, width=800, height=500)
                    st.success("‚úÖ Mapa interactivo generado con im√°genes satelitales reales")
        
        # PASO 4: CALCULAR RECOMENDACIONES SI ES NECESARIO
        if analisis_tipo == "RECOMENDACIONES NPK":
            with st.spinner("Calculando recomendaciones NPK..."):
                recomendaciones = calcular_recomendaciones_npk_gee(indices_gee, nutriente, cultivo)
                gdf_analizado['valor_recomendado'] = recomendaciones
                columna_valor = 'valor_recomendado'
        else:
            columna_valor = 'npk_actual'
        
        # ... (el resto del c√≥digo de an√°lisis, mapas est√°ticos, tablas, etc. se mantiene igual)
        
        # MOSTRAR RESULTADOS CON INFORMACI√ìN DE DATOS REALES
        st.subheader("üìä RESULTADOS DEL AN√ÅLISIS GEE")
        
        # Estad√≠sticas principales
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("Zonas Analizadas", len(gdf_analizado))
        with col2:
            st.metric("√Årea Total", f"{area_total:.1f} ha")
        with col3:
            if analisis_tipo == "FERTILIDAD ACTUAL":
                valor_prom = gdf_analizado['npk_actual'].mean()
                st.metric("√çndice NPK Promedio", f"{valor_prom:.3f}")
            else:
                valor_prom = gdf_analizado['valor_recomendado'].mean()
                st.metric(f"{nutriente} Promedio", f"{valor_prom:.1f} kg/ha")
        with col4:
            datos_reales_count = sum(1 for r in indices_gee if r['datos_reales'])
            st.metric("Datos Reales", f"{datos_reales_count}/{len(gdf_analizado)}")
        
        # ... (continuar con el resto del an√°lisis como antes)
        
        return True
        
    except Exception as e:
        st.error(f"‚ùå Error en an√°lisis GEE con im√°genes reales: {str(e)}")
        import traceback
        st.error(f"Detalle: {traceback.format_exc()}")
        return False

# =============================================================================
# INTERFAZ PRINCIPAL ACTUALIZADA
# =============================================================================

if uploaded_zip:
    with st.spinner("Cargando parcela..."):
        try:
            with tempfile.TemporaryDirectory() as tmp_dir:
                with zipfile.ZipFile(uploaded_zip, 'r') as zip_ref:
                    zip_ref.extractall(tmp_dir)
                
                shp_files = [f for f in os.listdir(tmp_dir) if f.endswith('.shp')]
                if shp_files:
                    shp_path = os.path.join(tmp_dir, shp_files[0])
                    gdf = gpd.read_file(shp_path)
                    
                    st.success(f"‚úÖ **Parcela cargada:** {len(gdf)} pol√≠gono(s)")
                    
                    # Informaci√≥n de la parcela
                    area_total = calcular_superficie(gdf).sum()
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        st.write("**üìä INFORMACI√ìN DE LA PARCELA:**")
                        st.write(f"- Pol√≠gonos: {len(gdf)}")
                        st.write(f"- √Årea total: {area_total:.1f} ha")
                        st.write(f"- CRS: {gdf.crs}")
                    
                    with col2:
                        st.write("**üéØ CONFIGURACI√ìN GEE MEJORADA:**")
                        st.write(f"- Cultivo: {ICONOS_CULTIVOS[cultivo]} {cultivo}")
                        st.write(f"- An√°lisis: {analisis_tipo}")
                        st.write(f"- Nutriente: {nutriente}")
                        st.write(f"- Sat√©lite: {fuente_satelital}")
                        st.write(f"- Fecha: {fecha_imagen.strftime('%d/%m/%Y')}")
                        st.write(f"- M√°x. nubes: {nubes_max}%")
                    
                    # BOT√ìN PRINCIPAL ACTUALIZADO
                    st.markdown("---")
                    st.markdown("### üöÄ ACCI√ìN PRINCIPAL - IM√ÅGENES SATELITALES REALES")
                    
                    col1, col2, col3 = st.columns([1, 2, 1])
                    with col2:
                        st.markdown(f"""
                        <div style='text-align: center; padding: 20px; border: 2px solid #4CAF50; border-radius: 10px; background-color: #f9fff9;'>
                            <h3>¬øListo para analizar con im√°genes satelitales reales?</h3>
                            <p><strong>Sat√©lite:</strong> {fuente_satelital}</p>
                            <p><strong>Cultivo:</strong> {cultivo}</p>
                            <p><strong>Fecha:</strong> {fecha_imagen.strftime('%Y-%m-%d')}</p>
                            <p><strong>M√°ximo nubes:</strong> {nubes_max}%</p>
                            <p>An√°lisis con datos reales de Google Earth Engine</p>
                        </div>
                        """, unsafe_allow_html=True)
                        
                        if st.button("**üõ∞Ô∏è EJECUTAR AN√ÅLISIS CON IM√ÅGENES REALES**", 
                                    type="primary", 
                                    use_container_width=True,
                                    key="analisis_imagenes_reales"):
                            with st.spinner("üõ∞Ô∏è Descargando im√°genes satelitales y ejecutando an√°lisis..."):
                                resultado = analisis_gee_completo_con_imagenes_reales(
                                    gdf, nutriente, analisis_tipo, n_divisiones, cultivo,
                                    fuente_satelital, fecha_imagen, nubes_max
                                )
                                if resultado:
                                    st.balloons()
                                    st.success("üéØ An√°lisis completado con im√°genes satelitales reales!")
                        
        except Exception as e:
            st.error(f"Error cargando shapefile: {str(e)}")

else:
    st.info("üìÅ Sube el ZIP de tu parcela para comenzar el an√°lisis")
    
    # INFORMACI√ìN ACTUALIZADA
    with st.expander("‚ÑπÔ∏è INFORMACI√ìN SOBRE IM√ÅGENES SATELITALES REALES"):
        st.markdown("""
        **üõ∞Ô∏è SISTEMA CON IM√ÅGENES SATELITALES REALES**
        
        **üì° FUENTES DISPONIBLES:**
        - **Sentinel-2:** 10m resoluci√≥n, im√°genes cada 5 d√≠as
        - **Landsat-8:** 30m resoluci√≥n, cada 16 d√≠as  
        - **Landsat-9:** 30m resoluci√≥n, mejor calibraci√≥n
        - **Simulado:** Datos sint√©ticos para pruebas
        
        **üî¨ √çNDICES AGR√çCOLAS CALCULADOS:**
        - **NDVI:** Salud vegetaci√≥n general
        - **NDRE:** Salud vegetaci√≥n avanzada (clorofila)
        - **EVI:** √çndice mejorado para √°reas densas
        - **GNDVI:** √çndice de verdor con banda verde
        - **NDWI:** √çndice de contenido de agua
        
        **üéØ MEJORAS CON IM√ÅGENES REALES:**
        - An√°lisis basado en datos satelitales actuales
        - Detecci√≥n precisa de variabilidad espacial
        - Monitoreo temporal del cultivo
        - Validaci√≥n cient√≠fica con datos reales
        - Mapas interactivos con im√°genes reales
        
        **üå± CULTIVOS SOPORTADOS:**
        - **üåæ TRIGO, üåΩ MA√çZ, ü´ò SOJA, üåæ SORGO, üåª GIRASOL**
        """)
