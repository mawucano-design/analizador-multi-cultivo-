# -*- coding: utf-8 -*-
import streamlit as st
import geopandas as gpd
import pandas as pd
import numpy as np
import tempfile
import os
import zipfile
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
from matplotlib.colors import LinearSegmentedColormap
import io
from shapely.geometry import Polygon
import math
import folium
from streamlit_folium import folium_static
import requests
import warnings
warnings.filterwarnings('ignore')

# Configuraci√≥n de p√°gina
st.set_page_config(page_title="üå± Analizador Multi-Cultivo GEE", layout="wide")
st.title("üå± ANALIZADOR MULTI-CULTIVO - METODOLOG√çA GEE + SENTINEL 2")
st.markdown("---")

# Configurar para restaurar .shx autom√°ticamente
os.environ['SHAPE_RESTORE_SHX'] = 'YES'

# =============================================================================
# CONFIGURACI√ìN SENTINEL HUB
# =============================================================================

# Credenciales con manejo seguro de secrets
try:
    SENTINEL_HUB_CREDENTIALS = {
        "client_id": st.secrets.get("SENTINEL_HUB_CLIENT_ID", "b296cf70-c9d2-4e69-91f4-f7be80b99ed1"),
        "client_secret": st.secrets.get("SENTINEL_HUB_CLIENT_SECRET", "358474d6-2326-4637-bf8e-30a709b2d6a6")
    }
except:
    SENTINEL_HUB_CREDENTIALS = {
        "client_id": "b296cf70-c9d2-4e69-91f4-f7be80b99ed1",
        "client_secret": "358474d6-2326-4637-bf8e-30a709b2d6a6"
    }

class SentinelHubConfig:
    """Maneja la configuraci√≥n de Sentinel Hub"""
    
    def __init__(self):
        self.base_url = "https://services.sentinel-hub.com/ogc/wms/"
        self.available = False
        self.config_message = ""
        
    def check_configuration(self):
        """Verifica si Sentinel Hub est√° configurado"""
        try:
            if ('sh_client_id' in st.session_state and 
                'sh_client_secret' in st.session_state and
                st.session_state.sh_client_id and 
                st.session_state.sh_client_secret):
                
                st.session_state.sh_configured = True
                self.available = True
                self.config_message = "‚úÖ Sentinel Hub configurado"
                return True
            
            elif (SENTINEL_HUB_CREDENTIALS["client_id"] != "tu_client_id_aqui" and
                  SENTINEL_HUB_CREDENTIALS["client_secret"] != "tu_client_secret_aqui"):
                
                st.session_state.sh_client_id = SENTINEL_HUB_CREDENTIALS["client_id"]
                st.session_state.sh_client_secret = SENTINEL_HUB_CREDENTIALS["client_secret"]
                st.session_state.sh_configured = True
                self.available = True
                self.config_message = "‚úÖ Sentinel Hub configurado (Autom√°tico)"
                return True
            
            elif (os.getenv('SENTINEL_HUB_CLIENT_ID') and 
                  os.getenv('SENTINEL_HUB_CLIENT_SECRET')):
                
                st.session_state.sh_client_id = os.getenv('SENTINEL_HUB_CLIENT_ID')
                st.session_state.sh_client_secret = os.getenv('SENTINEL_HUB_CLIENT_SECRET')
                st.session_state.sh_configured = True
                self.available = True
                self.config_message = "‚úÖ Sentinel Hub configurado (Variables Entorno)"
                return True
            
            else:
                self.available = False
                self.config_message = "‚ùå Sentinel Hub no configurado"
                return False
                
        except Exception as e:
            self.available = False
            self.config_message = f"‚ùå Error: {str(e)}"
            return False

# Inicializar configuraci√≥n
sh_config = SentinelHubConfig()

# =============================================================================
# MAPAS BASE ESRI
# =============================================================================

MAPAS_BASE = {
    "ESRI World Imagery": {
        "url": "https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}",
        "attribution": "Esri, Maxar, Earthstar Geographics",
        "name": "ESRI Satellite"
    },
    "ESRI World Street Map": {
        "url": "https://server.arcgisonline.com/ArcGIS/rest/services/World_Street_Map/MapServer/tile/{z}/{y}/{x}",
        "attribution": "Esri, HERE, Garmin",
        "name": "ESRI Streets"
    },
    "OpenStreetMap": {
        "url": "https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",
        "attribution": "OpenStreetMap contributors",
        "name": "OSM"
    },
    "CartoDB Positron": {
        "url": "https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png",
        "attribution": "CartoDB",
        "name": "CartoDB Light"
    }
}

# =============================================================================
# PAR√ÅMETROS GEE POR CULTIVO
# =============================================================================

PARAMETROS_CULTIVOS = {
    'TRIGO': {
        'NITROGENO': {'min': 120, 'max': 180},
        'FOSFORO': {'min': 40, 'max': 60},
        'POTASIO': {'min': 80, 'max': 120},
        'MATERIA_ORGANICA_OPTIMA': 3.5,
        'HUMEDAD_OPTIMA': 0.25,
        'NDVI_OPTIMO': 0.7,
        'NDRE_OPTIMO': 0.4
    },
    'MA√çZ': {
        'NITROGENO': {'min': 150, 'max': 220},
        'FOSFORO': {'min': 50, 'max': 70},
        'POTASIO': {'min': 100, 'max': 140},
        'MATERIA_ORGANICA_OPTIMA': 4.0,
        'HUMEDAD_OPTIMA': 0.3,
        'NDVI_OPTIMO': 0.75,
        'NDRE_OPTIMO': 0.45
    },
    'SOJA': {
        'NITROGENO': {'min': 80, 'max': 120},
        'FOSFORO': {'min': 35, 'max': 50},
        'POTASIO': {'min': 90, 'max': 130},
        'MATERIA_ORGANICA_OPTIMA': 3.8,
        'HUMEDAD_OPTIMA': 0.28,
        'NDVI_OPTIMO': 0.65,
        'NDRE_OPTIMO': 0.35
    },
    'SORGO': {
        'NITROGENO': {'min': 100, 'max': 150},
        'FOSFORO': {'min': 30, 'max': 45},
        'POTASIO': {'min': 70, 'max': 100},
        'MATERIA_ORGANICA_OPTIMA': 3.0,
        'HUMEDAD_OPTIMA': 0.22,
        'NDVI_OPTIMO': 0.6,
        'NDRE_OPTIMO': 0.3
    },
    'GIRASOL': {
        'NITROGENO': {'min': 90, 'max': 130},
        'FOSFORO': {'min': 25, 'max': 40},
        'POTASIO': {'min': 80, 'max': 110},
        'MATERIA_ORGANICA_OPTIMA': 3.2,
        'HUMEDAD_OPTIMA': 0.26,
        'NDVI_OPTIMO': 0.55,
        'NDRE_OPTIMO': 0.25
    }
}

# ICONOS Y COLORES POR CULTIVO
ICONOS_CULTIVOS = {
    'TRIGO': 'üåæ',
    'MA√çZ': 'üåΩ', 
    'SOJA': 'ü´ò',
    'SORGO': 'üåæ',
    'GIRASOL': 'üåª'
}

COLORES_CULTIVOS = {
    'TRIGO': '#FFD700',
    'MA√çZ': '#FFA500',
    'SOJA': '#8B4513',
    'SORGO': '#D2691E',
    'GIRASOL': '#FFD700'
}

# PALETAS GEE MEJORADAS
PALETAS_GEE = {
    'FERTILIDAD': ['#d73027', '#f46d43', '#fdae61', '#fee08b', '#d9ef8b', '#a6d96a', '#66bd63', '#1a9850', '#006837'],
    'NITROGENO': ['#00ff00', '#80ff00', '#ffff00', '#ff8000', '#ff0000'],
    'FOSFORO': ['#0000ff', '#4040ff', '#8080ff', '#c0c0ff', '#ffffff'],
    'POTASIO': ['#4B0082', '#6A0DAD', '#8A2BE2', '#9370DB', '#D8BFD8']
}

# =============================================================================
# FUNCIONES DE MAPAS BASE ESRI
# =============================================================================

def crear_mapa_base(gdf, mapa_seleccionado="ESRI World Imagery", zoom_start=14):
    """Crea un mapa base con el estilo seleccionado"""
    
    bounds = gdf.total_bounds
    center_lat = (bounds[1] + bounds[3]) / 2
    center_lon = (bounds[0] + bounds[2]) / 2
    
    m = folium.Map(
        location=[center_lat, center_lon],
        zoom_start=zoom_start,
        tiles=None,
        control_scale=True,
        zoom_control=True
    )
    
    for nombre, config in MAPAS_BASE.items():
        folium.TileLayer(
            tiles=config["url"],
            attr=config["attribution"],
            name=config["name"],
            control=True,
            show=(nombre == mapa_seleccionado)
        ).add_to(m)
    
    return m

def agregar_capa_poligonos(mapa, gdf, nombre_capa, color='blue', fill_opacity=0.3):
    """Agrega una capa de pol√≠gonos al mapa"""
    
    def estilo_poligono(feature):
        return {
            'fillColor': color,
            'color': 'black',
            'weight': 2,
            'fillOpacity': fill_opacity,
            'opacity': 0.8
        }
    
    available_fields = []
    available_aliases = []
    
    possible_fields = ['id_zona', 'id', 'nombre', 'name', 'area_ha']
    
    for field in possible_fields:
        if field in gdf.columns:
            available_fields.append(field)
            if field == 'id_zona':
                available_aliases.append('Zona:')
            elif field == 'id':
                available_aliases.append('ID:')
            elif field == 'nombre':
                available_aliases.append('Nombre:')
            elif field == 'name':
                available_aliases.append('Name:')
            elif field == 'area_ha':
                available_aliases.append('√Årea (ha):')
    
    if not available_fields:
        tooltip = folium.GeoJsonTooltip(fields=[], aliases=[], localize=True)
    else:
        tooltip = folium.GeoJsonTooltip(
            fields=available_fields,
            aliases=available_aliases,
            localize=True,
            style="background-color: white; border: 1px solid black; border-radius: 3px; padding: 5px;"
        )
    
    folium.GeoJson(
        gdf.__geo_interface__,
        name=nombre_capa,
        style_function=estilo_poligono,
        tooltip=tooltip
    ).add_to(mapa)

# =============================================================================
# FUNCIONES SENTINEL 2 HARMONIZADAS
# =============================================================================

class SentinelHubProcessor:
    """Procesa datos reales de Sentinel Hub para √≠ndices de cultivo"""
    
    def __init__(self):
        self.base_url = "https://services.sentinel-hub.com/ogc/wms/"
        
    def get_sentinel2_indices(self, geometry, fecha, bbox, cultivo, width=512, height=512):
        """Obtiene √≠ndices Sentinel 2 harmonizados para cultivos"""
        try:
            if not sh_config.available:
                return self._simulate_sentinel2_response(geometry, cultivo)
                
            # Convertir geometr√≠a a WKT
            wkt_geometry = geometry.wkt
            
            # Par√°metros espec√≠ficos del cultivo
            params_cultivo = PARAMETROS_CULTIVOS[cultivo]
            
            # Crear request para m√∫ltiples √≠ndices
            request_params = {
                'service': 'WMS',
                'request': 'GetMap',
                'layers': 'TRUE-COLOR-S2-L2A',
                'styles': '',
                'format': 'image/png',
                'transparent': 'true',
                'version': '1.1.1',
                'width': width,
                'height': height,
                'srs': 'EPSG:4326',
                'bbox': f"{bbox[0]},{bbox[1]},{bbox[2]},{bbox[3]}",
                'time': f"{fecha}/{fecha}",
                'showlogo': 'false',
                'maxcc': 20,
                'preview': '2',
                'evalscript': """
                //VERSION=3
                function setup() {
                    return {
                        input: ["B02", "B03", "B04", "B05", "B08", "B11", "B12"],
                        output: { bands: 4 }
                    };
                }
                
                function evaluatePixel(sample) {
                    // NDVI
                    let ndvi = (sample.B08 - sample.B04) / (sample.B08 + sample.B04);
                    
                    // NDRE (usando Red Edge)
                    let ndre = (sample.B08 - sample.B05) / (sample.B08 + sample.B05);
                    
                    // Materia org√°nica estimada (basada en SWIR)
                    let mo_index = (sample.B11 - sample.B12) / (sample.B11 + sample.B12);
                    
                    // Humedad del suelo
                    let moisture_index = (sample.B08 - sample.B11) / (sample.B08 + sample.B11);
                    
                    return [ndvi, ndre, mo_index, moisture_index];
                }
                """
            }
            
            # Simular respuesta por ahora (en implementaci√≥n real, har√≠as la request HTTP)
            return self._simulate_sentinel2_response(geometry, cultivo)
            
        except Exception as e:
            st.error(f"Error obteniendo datos Sentinel 2: {e}")
            return self._simulate_sentinel2_response(geometry, cultivo)
    
    def _simulate_sentinel2_response(self, geometry, cultivo):
        """Simula respuesta de Sentinel 2 con datos realistas por cultivo"""
        try:
            centroid = geometry.centroid
            x_norm = (centroid.x * 100) % 1
            y_norm = (centroid.y * 100) % 1
            
            # Par√°metros del cultivo para simulaci√≥n realista
            params = PARAMETROS_CULTIVOS[cultivo]
            
            # Simular patrones espaciales realistas
            patron_espacial = (x_norm * 0.6 + y_norm * 0.4)
            
            # NDVI espec√≠fico por cultivo
            ndvi_base = params['NDVI_OPTIMO'] * 0.7
            ndvi_variacion = patron_espacial * (params['NDVI_OPTIMO'] * 0.4)
            ndvi = ndvi_base + ndvi_variacion + np.random.normal(0, 0.05)
            ndvi = max(0.1, min(0.9, ndvi))
            
            # NDRE espec√≠fico por cultivo
            ndre_base = params['NDRE_OPTIMO'] * 0.8
            ndre_variacion = patron_espacial * (params['NDRE_OPTIMO'] * 0.3)
            ndre = ndre_base + ndre_variacion + np.random.normal(0, 0.03)
            ndre = max(0.05, min(0.7, ndre))
            
            # Materia org√°nica basada en par√°metros del cultivo
            mo_base = params['MATERIA_ORGANICA_OPTIMA'] * 0.8
            mo_variacion = patron_espacial * (params['MATERIA_ORGANICA_OPTIMA'] * 0.4)
            materia_organica = mo_base + mo_variacion + np.random.normal(0, 0.15)
            materia_organica = max(1.0, min(8.0, materia_organica))
            
            # Humedad del suelo espec√≠fica por cultivo
            humedad_base = params['HUMEDAD_OPTIMA'] * 0.9
            humedad_variacion = patron_espacial * (params['HUMEDAD_OPTIMA'] * 0.3)
            humedad_suelo = humedad_base + humedad_variacion + np.random.normal(0, 0.04)
            humedad_suelo = max(0.1, min(0.6, humedad_suelo))
            
            return {
                'ndvi': round(ndvi, 3),
                'ndre': round(ndre, 3),
                'materia_organica': round(materia_organica, 2),
                'humedad_suelo': round(humedad_suelo, 3),
                'fuente': 'SENTINEL_2_HARMONIZED'
            }
            
        except:
            # Valores por defecto si hay error
            return {
                'ndvi': 0.5,
                'ndre': 0.3,
                'materia_organica': 3.0,
                'humedad_suelo': 0.25,
                'fuente': 'SIMULADO'
            }

# =============================================================================
# FUNCIONES B√ÅSICAS DEL AN√ÅLISIS MULTICULTIVO
# =============================================================================

def calcular_superficie(gdf):
    """Calcula superficie en hect√°reas"""
    try:
        if gdf.crs and gdf.crs.is_geographic:
            area_m2 = gdf.geometry.area * 10000000000
        else:
            area_m2 = gdf.geometry.area
        return area_m2 / 10000
    except:
        return gdf.geometry.area / 10000

def dividir_parcela_en_zonas(gdf, n_zonas):
    """Divide la parcela en zonas de manejo"""
    if len(gdf) == 0:
        return gdf
    
    parcela_principal = gdf.iloc[0].geometry
    bounds = parcela_principal.bounds
    minx, miny, maxx, maxy = bounds
    
    sub_poligonos = []
    
    n_cols = math.ceil(math.sqrt(n_zonas))
    n_rows = math.ceil(n_zonas / n_cols)
    
    width = (maxx - minx) / n_cols
    height = (maxy - miny) / n_rows
    
    for i in range(n_rows):
        for j in range(n_cols):
            if len(sub_poligonos) >= n_zonas:
                break
                
            cell_minx = minx + (j * width)
            cell_maxx = minx + ((j + 1) * width)
            cell_miny = miny + (i * height)
            cell_maxy = miny + ((i + 1) * height)
            
            cell_poly = Polygon([
                (cell_minx, cell_miny),
                (cell_maxx, cell_miny),
                (cell_maxx, cell_maxy),
                (cell_minx, cell_maxy)
            ])
            
            intersection = parcela_principal.intersection(cell_poly)
            if not intersection.is_empty and intersection.area > 0:
                sub_poligonos.append(intersection)
    
    if sub_poligonos:
        nuevo_gdf = gpd.GeoDataFrame({
            'id_zona': range(1, len(sub_poligonos) + 1),
            'geometry': sub_poligonos
        }, crs=gdf.crs)
        return nuevo_gdf
    else:
        return gdf

def calcular_indices_satelitales_gee(gdf, cultivo, usar_sentinel2=True):
    """
    Implementa la metodolog√≠a completa con opci√≥n para Sentinel 2 real
    """
    n_poligonos = len(gdf)
    resultados = []
    
    if usar_sentinel2 and sh_configured:
        # Usar Sentinel 2 real
        st.info("üõ∞Ô∏è Usando datos Sentinel 2 harmonizados...")
        processor = SentinelHubProcessor()
        bounds = gdf.total_bounds
        bbox = [bounds[0], bounds[1], bounds[2], bounds[3]]
        
        progress_bar = st.progress(0)
        for idx, row in gdf.iterrows():
            progress = (idx + 1) / len(gdf)
            progress_bar.progress(progress)
            
            indices = processor.get_sentinel2_indices(
                row.geometry, 
                fecha_imagen,
                bbox,
                cultivo
            )
            
            # Calcular NPK actual con los √≠ndices reales
            npk_actual = (indices['ndvi'] * 0.4) + (indices['ndre'] * 0.3) + \
                        ((indices['materia_organica'] / 8) * 0.2) + (indices['humedad_suelo'] * 0.1)
            npk_actual = max(0, min(1, npk_actual))
            
            resultados.append({
                'materia_organica': indices['materia_organica'],
                'humedad_suelo': indices['humedad_suelo'],
                'ndvi': indices['ndvi'],
                'ndre': indices['ndre'],
                'npk_actual': round(npk_actual, 3),
                'fuente_datos': indices['fuente']
            })
        
        progress_bar.empty()
        
    else:
        # Usar metodolog√≠a simulada original
        st.info("üî¨ Usando metodolog√≠a GEE simulada...")
        gdf_centroids = gdf.copy()
        gdf_centroids['centroid'] = gdf_centroids.geometry.centroid
        gdf_centroids['x'] = gdf_centroids.centroid.x
        gdf_centroids['y'] = gdf_centroids.centroid.y
        
        x_coords = gdf_centroids['x'].tolist()
        y_coords = gdf_centroids['y'].tolist()
        
        x_min, x_max = min(x_coords), max(x_coords)
        y_min, y_max = min(y_coords), max(y_coords)
        
        params = PARAMETROS_CULTIVOS[cultivo]
        
        for idx, row in gdf_centroids.iterrows():
            x_norm = (row['x'] - x_min) / (x_max - x_min) if x_max != x_min else 0.5
            y_norm = (row['y'] - y_min) / (y_max - y_min) if y_max != y_min else 0.5
            
            patron_espacial = (x_norm * 0.6 + y_norm * 0.4)
            
            base_mo = params['MATERIA_ORGANICA_OPTIMA'] * 0.7
            variabilidad_mo = patron_espacial * (params['MATERIA_ORGANICA_OPTIMA'] * 0.6)
            materia_organica = base_mo + variabilidad_mo + np.random.normal(0, 0.2)
            materia_organica = max(0.5, min(8.0, materia_organica))
            
            base_humedad = params['HUMEDAD_OPTIMA'] * 0.8
            variabilidad_humedad = patron_espacial * (params['HUMEDAD_OPTIMA'] * 0.4)
            humedad_suelo = base_humedad + variabilidad_humedad + np.random.normal(0, 0.05)
            humedad_suelo = max(0.1, min(0.8, humedad_suelo))
            
            ndvi_base = params['NDVI_OPTIMO'] * 0.6
            ndvi_variacion = patron_espacial * (params['NDVI_OPTIMO'] * 0.5)
            ndvi = ndvi_base + ndvi_variacion + np.random.normal(0, 0.06)
            ndvi = max(0.1, min(0.9, ndvi))
            
            ndre_base = params['NDRE_OPTIMO'] * 0.7
            ndre_variacion = patron_espacial * (params['NDRE_OPTIMO'] * 0.4)
            ndre = ndre_base + ndre_variacion + np.random.normal(0, 0.04)
            ndre = max(0.05, min(0.7, ndre))
            
            npk_actual = (ndvi * 0.4) + (ndre * 0.3) + ((materia_organica / 8) * 0.2) + (humedad_suelo * 0.1)
            npk_actual = max(0, min(1, npk_actual))
            
            resultados.append({
                'materia_organica': round(materia_organica, 2),
                'humedad_suelo': round(humedad_suelo, 3),
                'ndvi': round(ndvi, 3),
                'ndre': round(ndre, 3),
                'npk_actual': round(npk_actual, 3),
                'fuente_datos': 'GEE_SIMULADO'
            })
    
    return resultados

def calcular_recomendaciones_npk_gee(indices, nutriente, cultivo):
    """Calcula recomendaciones NPK basadas en la metodolog√≠a GEE espec√≠fica por cultivo"""
    recomendaciones = []
    params = PARAMETROS_CULTIVOS[cultivo]
    
    for idx in indices:
        ndre = idx['ndre']
        materia_organica = idx['materia_organica']
        humedad_suelo = idx['humedad_suelo']
        ndvi = idx['ndvi']
        
        if nutriente == "NITR√ìGENO":
            factor_n = ((1 - ndre) * 0.6 + (1 - ndvi) * 0.4)
            n_recomendado = (factor_n * 
                           (params['NITROGENO']['max'] - params['NITROGENO']['min']) + 
                           params['NITROGENO']['min'])
            n_recomendado = max(params['NITROGENO']['min'] * 0.8, 
                              min(params['NITROGENO']['max'] * 1.2, n_recomendado))
            recomendaciones.append(round(n_recomendado, 1))
            
        elif nutriente == "F√ìSFORO":
            factor_p = ((1 - (materia_organica / 8)) * 0.7 + (1 - humedad_suelo) * 0.3)
            p_recomendado = (factor_p * 
                           (params['FOSFORO']['max'] - params['FOSFORO']['min']) + 
                           params['FOSFORO']['min'])
            p_recomendado = max(params['FOSFORO']['min'] * 0.8, 
                              min(params['FOSFORO']['max'] * 1.2, p_recomendado))
            recomendaciones.append(round(p_recomendado, 1))
            
        else:
            factor_k = ((1 - ndre) * 0.4 + (1 - humedad_suelo) * 0.4 + (1 - (materia_organica / 8)) * 0.2)
            k_recomendado = (factor_k * 
                           (params['POTASIO']['max'] - params['POTASIO']['min']) + 
                           params['POTASIO']['min'])
            k_recomendado = max(params['POTASIO']['min'] * 0.8, 
                              min(params['POTASIO']['max'] * 1.2, k_recomendado))
            recomendaciones.append(round(k_recomendado, 1))
    
    return recomendaciones

def crear_mapa_gee(gdf, nutriente, analisis_tipo, cultivo):
    """Crea mapa con la metodolog√≠a y paletas de Google Earth Engine"""
    try:
        fig, ax = plt.subplots(1, 1, figsize=(14, 10))
        
        if analisis_tipo == "FERTILIDAD ACTUAL":
            cmap = LinearSegmentedColormap.from_list('fertilidad_gee', PALETAS_GEE['FERTILIDAD'])
            vmin, vmax = 0, 1
            columna = 'npk_actual'
            titulo_sufijo = '√çndice NPK Actual (0-1)'
        else:
            if nutriente == "NITR√ìGENO":
                cmap = LinearSegmentedColormap.from_list('nitrogeno_gee', PALETAS_GEE['NITROGENO'])
                vmin, vmax = (PARAMETROS_CULTIVOS[cultivo]['NITROGENO']['min'] * 0.8, 
                            PARAMETROS_CULTIVOS[cultivo]['NITROGENO']['max'] * 1.2)
            elif nutriente == "F√ìSFORO":
                cmap = LinearSegmentedColormap.from_list('fosforo_gee', PALETAS_GEE['FOSFORO'])
                vmin, vmax = (PARAMETROS_CULTIVOS[cultivo]['FOSFORO']['min'] * 0.8, 
                            PARAMETROS_CULTIVOS[cultivo]['FOSFORO']['max'] * 1.2)
            else:
                cmap = LinearSegmentedColormap.from_list('potasio_gee', PALETAS_GEE['POTASIO'])
                vmin, vmax = (PARAMETROS_CULTIVOS[cultivo]['POTASIO']['min'] * 0.8, 
                            PARAMETROS_CULTIVOS[cultivo]['POTASIO']['max'] * 1.2)
            
            columna = 'valor_recomendado'
            titulo_sufijo = f'Recomendaci√≥n {nutriente} (kg/ha)'
        
        for idx, row in gdf.iterrows():
            valor = row[columna]
            valor_norm = (valor - vmin) / (vmax - vmin)
            valor_norm = max(0, min(1, valor_norm))
            color = cmap(valor_norm)
            
            gdf.iloc[[idx]].plot(ax=ax, color=color, edgecolor='black', linewidth=1.5)
            
            centroid = row.geometry.centroid
            ax.annotate(f"Z{row['id_zona']}\n{valor:.1f}", (centroid.x, centroid.y), 
                       xytext=(5, 5), textcoords="offset points", 
                       fontsize=8, color='black', weight='bold',
                       bbox=dict(boxstyle="round,pad=0.3", facecolor='white', alpha=0.9))
        
        ax.set_title(f'{ICONOS_CULTIVOS[cultivo]} AN√ÅLISIS GEE - {cultivo}\n'
                    f'{analisis_tipo} - {titulo_sufijo}\n'
                    f'Metodolog√≠a Google Earth Engine', 
                    fontsize=16, fontweight='bold', pad=20)
        
        ax.set_xlabel('Longitud')
        ax.set_ylabel('Latitud')
        ax.grid(True, alpha=0.3)
        
        sm = plt.cm.ScalarMappable(cmap=cmap, norm=plt.Normalize(vmin=vmin, vmax=vmax))
        sm.set_array([])
        cbar = plt.colorbar(sm, ax=ax, shrink=0.8)
        cbar.set_label(titulo_sufijo, fontsize=12, fontweight='bold')
        
        plt.tight_layout()
        
        buf = io.BytesIO()
        plt.savefig(buf, format='png', dpi=150, bbox_inches='tight')
        buf.seek(0)
        plt.close()
        
        return buf
        
    except Exception as e:
        st.error(f"‚ùå Error creando mapa GEE: {str(e)}")
        return None

# =============================================================================
# FUNCIONES AUXILIARES
# =============================================================================

def get_fuente_nitrogeno(cultivo):
    """Obtiene la fuente de nitr√≥geno recomendada por cultivo"""
    fuentes = {
        'TRIGO': 'Nitrato de amonio',
        'MA√çZ': 'Urea + Nitrato de amonio', 
        'SOJA': 'Fosfato diam√≥nico (contiene N)',
        'SORGO': 'Urea',
        'GIRASOL': 'Nitrato de amonio'
    }
    return fuentes.get(cultivo, 'Urea')

def get_fertilizante_balanceado(cultivo):
    """Obtiene el fertilizante balanceado recomendado por cultivo"""
    fertilizantes = {
        'TRIGO': '15-15-15 o 20-20-0',
        'MA√çZ': '17-17-17 o 20-10-10',
        'SOJA': '5-20-20 o 0-20-20',
        'SORGO': '12-24-12 o 10-20-10',
        'GIRASOL': '8-15-30 o 10-10-20'
    }
    return fertilizantes.get(cultivo, 'Fertilizante complejo balanceado')

# =============================================================================
# FUNCI√ìN PRINCIPAL DE AN√ÅLISIS
# =============================================================================

def analisis_gee_completo(gdf, nutriente, analisis_tipo, n_divisiones, cultivo):
    """Funci√≥n principal que ejecuta el an√°lisis completo"""
    try:
        st.header(f"{ICONOS_CULTIVOS[cultivo]} AN√ÅLISIS {cultivo} - METODOLOG√çA GEE + SENTINEL 2")
        
        # Mostrar informaci√≥n de fuente de datos
        if sh_configured:
            st.success(f"üõ∞Ô∏è Usando datos Sentinel 2 harmonizados (Fecha: {fecha_imagen})")
        else:
            st.info("üî¨ Usando metodolog√≠a GEE simulada (Configura Sentinel Hub para datos reales)")
        
        # PASO 1: DIVIDIR PARCELA
        st.subheader("üìê DIVIDIENDO PARCELA EN ZONAS DE MANEJO")
        with st.spinner("Dividiendo parcela..."):
            gdf_dividido = dividir_parcela_en_zonas(gdf, n_divisiones)
        
        st.success(f"‚úÖ Parcela dividida en {len(gdf_dividido)} zonas")
        
        # Calcular √°reas
        areas_ha = calcular_superficie(gdf_dividido)
        area_total = areas_ha.sum()
        
        # PASO 2: CALCULAR √çNDICES CON SENTINEL 2 O GEE
        st.subheader("üõ∞Ô∏è CALCULANDO √çNDICES SATELITALES")
        with st.spinner(f"Ejecutando algoritmos para {cultivo}..."):
            indices_gee = calcular_indices_satelitales_gee(gdf_dividido, cultivo, sh_configured)
        
        # Crear dataframe con resultados
        gdf_analizado = gdf_dividido.copy()
        gdf_analizado['area_ha'] = areas_ha
        
        for idx, indice in enumerate(indices_gee):
            for key, value in indice.items():
                gdf_analizado.loc[gdf_analizado.index[idx], key] = value
        
        # PASO 3: CALCULAR RECOMENDACIONES SI ES NECESARIO
        if analisis_tipo == "RECOMENDACIONES NPK":
            with st.spinner("Calculando recomendaciones NPK..."):
                recomendaciones = calcular_recomendaciones_npk_gee(indices_gee, nutriente, cultivo)
                gdf_analizado['valor_recomendado'] = recomendaciones
                columna_valor = 'valor_recomendado'
        else:
            columna_valor = 'npk_actual'
        
        # PASO 4: CATEGORIZAR
        def categorizar_gee(valor, nutriente, analisis_tipo, cultivo):
            params = PARAMETROS_CULTIVOS[cultivo]
            
            if analisis_tipo == "FERTILIDAD ACTUAL":
                if valor < 0.3: return "MUY BAJA"
                elif valor < 0.5: return "BAJA"
                elif valor < 0.6: return "MEDIA"
                elif valor < 0.7: return "BUENA"
                else: return "√ìPTIMA"
            else:
                if nutriente == "NITR√ìGENO":
                    rango = params['NITROGENO']['max'] - params['NITROGENO']['min']
                    if valor < params['NITROGENO']['min'] + 0.2 * rango: return "MUY BAJO"
                    elif valor < params['NITROGENO']['min'] + 0.4 * rango: return "BAJO"
                    elif valor < params['NITROGENO']['min'] + 0.6 * rango: return "MEDIO"
                    elif valor < params['NITROGENO']['min'] + 0.8 * rango: return "ALTO"
                    else: return "MUY ALTO"
                elif nutriente == "F√ìSFORO":
                    rango = params['FOSFORO']['max'] - params['FOSFORO']['min']
                    if valor < params['FOSFORO']['min'] + 0.2 * rango: return "MUY BAJO"
                    elif valor < params['FOSFORO']['min'] + 0.4 * rango: return "BAJO"
                    elif valor < params['FOSFORO']['min'] + 0.6 * rango: return "MEDIO"
                    elif valor < params['FOSFORO']['min'] + 0.8 * rango: return "ALTO"
                    else: return "MUY ALTO"
                else:
                    rango = params['POTASIO']['max'] - params['POTASIO']['min']
                    if valor < params['POTASIO']['min'] + 0.2 * rango: return "MUY BAJO"
                    elif valor < params['POTASIO']['min'] + 0.4 * rango: return "BAJO"
                    elif valor < params['POTASIO']['min'] + 0.6 * rango: return "MEDIO"
                    elif valor < params['POTASIO']['min'] + 0.8 * rango: return "ALTO"
                    else: return "MUY ALTO"
        
        gdf_analizado['categoria'] = [
            categorizar_gee(row[columna_valor], nutriente, analisis_tipo, cultivo) 
            for idx, row in gdf_analizado.iterrows()
        ]
        
        # PASO 5: MOSTRAR RESULTADOS CON MAPAS ESRI
        st.subheader("üìä RESULTADOS DEL AN√ÅLISIS")
        
        # M√©tricas principales
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("Zonas Analizadas", len(gdf_analizado))
        with col2:
            st.metric("√Årea Total", f"{area_total:.1f} ha")
        with col3:
            if analisis_tipo == "FERTILIDAD ACTUAL":
                valor_prom = gdf_analizado['npk_actual'].mean()
                st.metric("√çndice NPK Promedio", f"{valor_prom:.3f}")
            else:
                valor_prom = gdf_analizado['valor_recomendado'].mean()
                st.metric(f"{nutriente} Promedio", f"{valor_prom:.1f} kg/ha")
        with col4:
            fuente = gdf_analizado['fuente_datos'].iloc[0] if 'fuente_datos' in gdf_analizado.columns else 'GEE_SIMULADO'
            st.metric("Fuente Datos", fuente)
        
        # MAPAS INTERACTIVOS CON ESRI
        st.subheader("üó∫Ô∏è MAPAS INTERACTIVOS - ESRI")
        
        # Crear pesta√±as para diferentes visualizaciones
        tab1, tab2, tab3 = st.tabs(["üéØ Mapa de Zonas", "üåø Mapa de NDVI", "üìä Mapa de Resultados"])
        
        with tab1:
            st.subheader("üó∫Ô∏è VISUALIZACI√ìN DE ZONAS EN MAPA BASE")
            with st.spinner("Cargando mapa..."):
                mapa_zonas = crear_mapa_base(gdf_analizado, mapa_base, zoom_start=14)
                agregar_capa_poligonos(mapa_zonas, gdf_analizado, "Zonas de Manejo", 'blue', 0.5)
                folium_static(mapa_zonas, width=900, height=500)
        
        with tab2:
            st.subheader("üåø MAPA DE NDVI - ESTADO VEGETATIVO")
            # Crear mapa de NDVI
            mapa_ndvi = crear_mapa_base(gdf_analizado, mapa_base, zoom_start=14)
            
            # Funci√≥n para colorear por NDVI
            def estilo_ndvi(feature):
                ndvi = feature['properties']['ndvi']
                if ndvi < 0.3:
                    color = '#8B4513'  # Marr√≥n - bajo
                elif ndvi < 0.5:
                    color = '#FFD700'  # Amarillo - medio
                elif ndvi < 0.7:
                    color = '#32CD32'  # Verde claro - bueno
                else:
                    color = '#006400'  # Verde oscuro - excelente
                
                return {
                    'fillColor': color,
                    'color': 'black',
                    'weight': 1,
                    'fillOpacity': 0.7,
                    'opacity': 0.8
                }
            
            folium.GeoJson(
                gdf_analizado.__geo_interface__,
                name='NDVI por Zona',
                style_function=estilo_ndvi,
                tooltip=folium.GeoJsonTooltip(
                    fields=['id_zona', 'ndvi', 'area_ha', 'categoria'],
                    aliases=['Zona:', 'NDVI:', '√Årea (ha):', 'Categor√≠a:'],
                    localize=True
                )
            ).add_to(mapa_ndvi)
            
            folium_static(mapa_ndvi, width=900, height=500)
        
        with tab3:
            st.subheader("üìä MAPA DE RESULTADOS PRINCIPALES")
            # Mapa seg√∫n el tipo de an√°lisis
            mapa_resultados = crear_mapa_base(gdf_analizado, mapa_base, zoom_start=14)
            
            def estilo_resultados(feature):
                if analisis_tipo == "FERTILIDAD ACTUAL":
                    valor = feature['properties']['npk_actual']
                    if valor < 0.3:
                        color = '#FF6B6B'  # Rojo - muy baja
                    elif valor < 0.5:
                        color = '#FFA726'  # Naranja - baja
                    elif valor < 0.6:
                        color = '#FFD54F'  # Amarillo - media
                    elif valor < 0.7:
                        color = '#AED581'  # Verde claro - buena
                    else:
                        color = '#66BB6A'  # Verde - √≥ptima
                else:
                    valor = feature['properties']['valor_recomendado']
                    # L√≥gica de colores para recomendaciones
                    if valor < 50:
                        color = '#FF6B6B'
                    elif valor < 100:
                        color = '#FFA726'
                    elif valor < 150:
                        color = '#FFD54F'
                    elif valor < 200:
                        color = '#AED581'
                    else:
                        color = '#66BB6A'
                
                return {
                    'fillColor': color,
                    'color': 'black',
                    'weight': 1,
                    'fillOpacity': 0.7,
                    'opacity': 0.8
                }
            
            folium.GeoJson(
                gdf_analizado.__geo_interface__,
                name='Resultados por Zona',
                style_function=estilo_resultados,
                tooltip=folium.GeoJsonTooltip(
                    fields=['id_zona', columna_valor, 'categoria', 'area_ha'],
                    aliases=['Zona:', 'Valor:', 'Categor√≠a:', '√Årea (ha):'],
                    localize=True
                )
            ).add_to(mapa_resultados)
            
            folium_static(mapa_resultados, width=900, height=500)
        
        # MAPA GEE TRADICIONAL
        st.subheader("üé® MAPA GEE TRADICIONAL")
        mapa_buffer = crear_mapa_gee(gdf_analizado, nutriente, analisis_tipo, cultivo)
        if mapa_buffer:
            st.image(mapa_buffer, use_container_width=True)
            
            st.download_button(
                "üì• Descargar Mapa GEE",
                mapa_buffer,
                f"mapa_gee_{cultivo}_{analisis_tipo.replace(' ', '_')}_{datetime.now().strftime('%Y%m%d_%H%M')}.png",
                "image/png"
            )
        
        # TABLA DE √çNDICES
        st.subheader("üî¨ √çNDICES SATELITALES POR ZONA")
        
        columnas_indices = ['id_zona', 'npk_actual', 'materia_organica', 'ndvi', 'ndre', 'humedad_suelo', 'categoria']
        if analisis_tipo == "RECOMENDACIONES NPK":
            columnas_indices.insert(2, 'valor_recomendado')
        
        tabla_indices = gdf_analizado[columnas_indices].copy()
        tabla_indices.columns = ['Zona', 'NPK Actual'] + (['Recomendaci√≥n'] if analisis_tipo == "RECOMENDACIONES NPK" else []) + [
            'Materia Org (%)', 'NDVI', 'NDRE', 'Humedad', 'Categor√≠a'
        ]
        
        st.dataframe(tabla_indices, use_container_width=True)
        
        # RECOMENDACIONES ESPEC√çFICAS POR CULTIVO
        st.subheader("üí° RECOMENDACIONES ESPEC√çFICAS GEE")
        
        categorias = gdf_analizado['categoria'].unique()
        for cat in sorted(categorias):
            subset = gdf_analizado[gdf_analizado['categoria'] == cat]
            area_cat = subset['area_ha'].sum()
            
            with st.expander(f"üéØ **{cat}** - {area_cat:.1f} ha ({(area_cat/area_total*100):.1f}% del √°rea)"):
                
                if analisis_tipo == "FERTILIDAD ACTUAL":
                    if cat in ["MUY BAJA", "BAJA"]:
                        st.markdown("**üö® ESTRATEGIA: FERTILIZACI√ìN CORRECTIVA**")
                        st.markdown("- Aplicar dosis completas de NPK")
                        st.markdown("- Incorporar materia org√°nica")
                        st.markdown("- Monitorear cada 3 meses")
                    elif cat == "MEDIA":
                        st.markdown("**‚úÖ ESTRATEGIA: MANTENIMIENTO BALANCEADO**")
                        st.markdown("- Seguir programa est√°ndar de fertilizaci√≥n")
                        st.markdown("- Monitorear cada 6 meses")
                    else:
                        st.markdown("**üåü ESTRATEGIA: MANTENIMIENTO CONSERVADOR**")
                        st.markdown("- Reducir dosis de fertilizantes")
                        st.markdown("- Enfoque en sostenibilidad")
                
                else:
                    if cat in ["MUY BAJO", "BAJO"]:
                        st.markdown("**üö® APLICACI√ìN ALTA** - Dosis correctiva urgente")
                        if nutriente == "NITR√ìGENO":
                            st.markdown(f"- **Fuentes:** Urea (46% N) o {get_fuente_nitrogeno(cultivo)}")
                            st.markdown("- **Aplicaci√≥n:** 2-3 dosis fraccionadas")
                        elif nutriente == "F√ìSFORO":
                            st.markdown("- **Fuentes:** Superfosfato triple (46% P‚ÇÇO‚ÇÖ) o Fosfato diam√≥nico")
                            st.markdown("- **Aplicaci√≥n:** Incorporar al suelo")
                        else:
                            st.markdown("- **Fuentes:** Cloruro de potasio (60% K‚ÇÇO) o Sulfato de potasio")
                            st.markdown("- **Aplicaci√≥n:** 2-3 aplicaciones")
                    
                    elif cat == "MEDIO":
                        st.markdown("**‚úÖ APLICACI√ìN MEDIA** - Mantenimiento balanceado")
                        st.markdown(f"- **Fuentes:** {get_fertilizante_balanceado(cultivo)}")
                        st.markdown("- **Aplicaci√≥n:** Programa est√°ndar")
                    
                    else:
                        st.markdown("**üåü APLICACI√ìN BAJA** - Reducci√≥n de dosis")
                        st.markdown("- **Fuentes:** Fertilizantes bajos en el nutriente")
                        st.markdown("- **Aplicaci√≥n:** Solo mantenimiento")
                
                col1, col2, col3 = st.columns(3)
                with col1:
                    st.metric("Zonas", len(subset))
                with col2:
                    if analisis_tipo == "FERTILIDAD ACTUAL":
                        st.metric("NPK Prom", f"{subset['npk_actual'].mean():.3f}")
                    else:
                        st.metric("Valor Prom", f"{subset['valor_recomendado'].mean():.1f}")
                with col3:
                    st.metric("√Årea", f"{area_cat:.1f} ha")
        
        # DESCARGA DE RESULTADOS
        st.subheader("üì• DESCARGAR RESULTADOS COMPLETOS")
        
        csv = gdf_analizado.to_csv(index=False)
        st.download_button(
            "üìã Descargar CSV con An√°lisis GEE",
            csv,
            f"analisis_gee_{cultivo}_{analisis_tipo.replace(' ', '_')}_{datetime.now().strftime('%Y%m%d_%H%M')}.csv",
            "text/csv"
        )
        
        # INFORMACI√ìN T√âCNICA MEJORADA
        with st.expander("üîç VER METODOLOG√çA DETALLADA"):
            fuente_actual = gdf_analizado['fuente_datos'].iloc[0] if 'fuente_datos' in gdf_analizado.columns else 'GEE_SIMULADO'
            
            st.markdown(f"""
            **üåê METODOLOG√çA INTEGRADA - {cultivo}**
            
            **üì° FUENTE DE DATOS:** {fuente_actual}
            **üìÖ FECHA IMAGEN:** {fecha_imagen}
            **üó∫Ô∏è MAPA BASE:** {mapa_base}
            
            **üéØ PAR√ÅMETROS √ìPTIMOS {cultivo}:**
            - **Materia Org√°nica:** {PARAMETROS_CULTIVOS[cultivo]['MATERIA_ORGANICA_OPTIMA']}%
            - **Humedad Suelo:** {PARAMETROS_CULTIVOS[cultivo]['HUMEDAD_OPTIMA']}
            - **NDVI √ìptimo:** {PARAMETROS_CULTIVOS[cultivo]['NDVI_OPTIMO']}
            - **NDRE √ìptimo:** {PARAMETROS_CULTIVOS[cultivo]['NDRE_OPTIMO']}
            
            **üéØ RANGOS NPK RECOMENDADOS:**
            - **Nitr√≥geno:** {PARAMETROS_CULTIVOS[cultivo]['NITROGENO']['min']}-{PARAMETROS_CULTIVOS[cultivo]['NITROGENO']['max']} kg/ha
            - **F√≥sforo:** {PARAMETROS_CULTIVOS[cultivo]['FOSFORO']['min']}-{PARAMETROS_CULTIVOS[cultivo]['FOSFORO']['max']} kg/ha  
            - **Potasio:** {PARAMETROS_CULTIVOS[cultivo]['POTASIO']['min']}-{PARAMETROS_CULTIVOS[cultivo]['POTASIO']['max']} kg/ha
            """)
        
        return True
        
    except Exception as e:
        st.error(f"‚ùå Error en an√°lisis GEE: {str(e)}")
        import traceback
        st.error(f"Detalle: {traceback.format_exc()}")
        return False

# =============================================================================
# SIDEBAR MEJORADO
# =============================================================================

with st.sidebar:
    st.header("‚öôÔ∏è Configuraci√≥n")
    
    # Configuraci√≥n temporal para Sentinel 2
    st.subheader("üìÖ Imagen Satelital")
    fecha_imagen = st.date_input(
        "Fecha de imagen Sentinel 2:",
        value=datetime.now() - timedelta(days=30),
        max_value=datetime.now(),
        help="Selecciona la fecha para la imagen satelital (m√°ximo 30 d√≠as atr√°s para mejor disponibilidad)"
    )
    
    st.subheader("üó∫Ô∏è Mapa Base")
    mapa_base = st.selectbox(
        "Seleccionar mapa base:",
        list(MAPAS_BASE.keys()),
        index=0
    )
    
    # Configuraci√≥n Sentinel Hub
    st.subheader("üõ∞Ô∏è Sentinel Hub")
    
    # Inicializar configuraci√≥n aqu√≠ para que las variables est√©n disponibles
    sh_configured = sh_config.check_configuration()
    
    if not sh_configured:
        st.error("‚ùå Sentinel Hub no configurado")
        with st.expander("üîê Configurar Sentinel Hub"):
            st.markdown("""
            **Para datos Sentinel 2 reales:**
            1. **Crear cuenta:** [Sentinel Hub](https://www.sentinel-hub.com/)
            2. **Obtener credenciales** (Client ID y Client Secret)
            """)
            
            sh_client_id = st.text_input("Client ID:", type="password")
            sh_client_secret = st.text_input("Client Secret:", type="password")
            
            if st.button("üíæ Guardar Credenciales"):
                if sh_client_id and sh_client_secret:
                    st.session_state.sh_client_id = sh_client_id
                    st.session_state.sh_client_secret = sh_client_secret
                    st.session_state.sh_configured = True
                    st.success("‚úÖ Credenciales guardadas")
                    st.rerun()
                else:
                    st.error("‚ùå Ingresa ambas credenciales")
    else:
        st.success(sh_config.config_message)
    
    # Configuraci√≥n de cultivo
    cultivo = st.selectbox("Cultivo:", 
                          ["TRIGO", "MA√çZ", "SOJA", "SORGO", "GIRASOL"])
    
    analisis_tipo = st.selectbox("Tipo de An√°lisis:", 
                               ["FERTILIDAD ACTUAL", "RECOMENDACIONES NPK"])
    
    nutriente = st.selectbox("Nutriente:", ["NITR√ìGENO", "F√ìSFORO", "POTASIO"])
    
    st.subheader("üéØ Divisi√≥n de Parcela")
    n_divisiones = st.slider("N√∫mero de zonas de manejo:", min_value=16, max_value=48, value=32)
    
    st.subheader("üì§ Subir Parcela")
    uploaded_zip = st.file_uploader("Subir ZIP con shapefile de tu parcela", type=['zip'])

# =============================================================================
# INTERFAZ PRINCIPAL
# =============================================================================

if uploaded_zip:
    with st.spinner("Cargando parcela..."):
        try:
            with tempfile.TemporaryDirectory() as tmp_dir:
                with zipfile.ZipFile(uploaded_zip, 'r') as zip_ref:
                    zip_ref.extractall(tmp_dir)
                
                shp_files = [f for f in os.listdir(tmp_dir) if f.endswith('.shp')]
                if shp_files:
                    shp_path = os.path.join(tmp_dir, shp_files[0])
                    gdf = gpd.read_file(shp_path)
                    
                    st.success(f"‚úÖ **Parcela cargada:** {len(gdf)} pol√≠gono(s)")
                    
                    # Informaci√≥n de la parcela
                    area_total = calcular_superficie(gdf).sum()
                    
                    col1, col2 = st.columns(2)
                    with col1:
                        st.write("**üìä INFORMACI√ìN DE LA PARCELA:**")
                        st.write(f"- Pol√≠gonos: {len(gdf)}")
                        st.write(f"- √Årea total: {area_total:.1f} ha")
                        st.write(f"- CRS: {gdf.crs}")
                    
                    with col2:
                        st.write("**üéØ CONFIGURACI√ìN:**")
                        st.write(f"- Cultivo: {ICONOS_CULTIVOS[cultivo]} {cultivo}")
                        st.write(f"- An√°lisis: {analisis_tipo}")
                        st.write(f"- Nutriente: {nutriente}")
                        st.write(f"- Zonas: {n_divisiones}")
                        st.write(f"- Mapa Base: {mapa_base}")
                    
                    # Mostrar vista previa en mapa
                    st.subheader("üó∫Ô∏è VISTA PREVIA DE LA PARCELA")
                    with st.spinner("Cargando vista previa..."):
                        mapa_preview = crear_mapa_base(gdf, mapa_base, zoom_start=13)
                        agregar_capa_poligonos(mapa_preview, gdf, "Parcela Original", 'red', 0.5)
                        folium_static(mapa_preview, width=900, height=400)
                    
                    # EJECUTAR AN√ÅLISIS MEJORADO
                    if st.button("üöÄ EJECUTAR AN√ÅLISIS GEE + SENTINEL 2", type="primary"):
                        analisis_gee_completo(gdf, nutriente, analisis_tipo, n_divisiones, cultivo)
                        
        except Exception as e:
            st.error(f"Error cargando shapefile: {str(e)}")

else:
    st.info("üìÅ Sube el ZIP de tu parcela para comenzar el an√°lisis")
    
    # INFORMACI√ìN INICIAL MEJORADA
    with st.expander("‚ÑπÔ∏è INFORMACI√ìN SOBRE LA METODOLOG√çA INTEGRADA"):
        st.markdown("""
        **üå± SISTEMA DE AN√ÅLISIS MULTI-CULTIVO (GEE + SENTINEL 2)**
        
        **üõ∞Ô∏è NUEVAS CARACTER√çSTICAS:**
        - **Sentinel 2 Harmonizado:** Datos reales de sat√©lite (10m resoluci√≥n)
        - **Mapas Base ESRI:** Visualizaci√≥n profesional con im√°genes actualizadas
        - **√çndices en Tiempo Real:** NDVI, NDRE, materia org√°nica y humedad
        - **Metodolog√≠a GEE:** Algoritmos cient√≠ficos de Google Earth Engine
        
        **üìä CULTIVOS SOPORTADOS:**
        - **üåæ TRIGO:** Cereal de clima templado
        - **üåΩ MA√çZ:** Cereal de alta demanda nutricional  
        - **ü´ò SOJA:** Leguminosa fijadora de nitr√≥geno
        - **üåæ SORGO:** Cereal resistente a sequ√≠a
        - **üåª GIRASOL:** Oleaginosa de profundas ra√≠ces
        
        **üöÄ FUNCIONALIDADES:**
        - **üå± Fertilidad Actual:** Estado NPK del suelo usando √≠ndices satelitales
        - **üíä Recomendaciones NPK:** Dosis espec√≠ficas por cultivo
        - **üõ∞Ô∏è Datos Reales:** Sentinel 2 L2A (atmosf√©ricamente corregido)
        - **üó∫Ô∏è Mapas Interactivos:** M√∫ltiples capas base ESRI
        - **üéØ Agricultura Precisi√≥n:** Mapas de prescripci√≥n por zonas
        """)
